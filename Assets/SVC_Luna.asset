%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: -777816280, guid: 4ba4712be85197047b4431ca07d6d1df, type: 3}
  m_Name: SVC_Luna
  m_EditorClassIdentifier: 
  _svcLunaVersion: 2
  _shaderVariants:
  - shader: {fileID: 66, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords: []
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - _NORMALMAP
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - _ADDITIONAL_LIGHTS_VERTEX
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - _ADDITIONAL_LIGHTS_VERTEX
    - _NORMALMAP
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - _RECEIVE_SHADOWS_OFF
    - _SURFACE_TYPE_TRANSPARENT
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - _NORMALMAP
    - _SPECULAR_SETUP
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - _NORMALMAP
    - _RECEIVE_SHADOWS_OFF
    - _SURFACE_TYPE_TRANSPARENT
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - _ADDITIONAL_LIGHTS_VERTEX
    - _RECEIVE_SHADOWS_OFF
    - _SURFACE_TYPE_TRANSPARENT
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - _ADDITIONAL_LIGHTS_VERTEX
    - _NORMALMAP
    - _SPECULAR_SETUP
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - _ADDITIONAL_LIGHTS_VERTEX
    - _NORMALMAP
    - _RECEIVE_SHADOWS_OFF
    - _SURFACE_TYPE_TRANSPARENT
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 8
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords: []
  - shader: {fileID: 4800000, guid: 36e335017ad71d54fbb10842863188ae, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 4800000, guid: 650dd9526735d5b46b79224bc6e94025, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords: []
  - shader: {fileID: 202, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 10753, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 10753, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - PIXELSNAP_ON
  - shader: {fileID: -6465566751694194690, guid: 171902f6490be574896e89d1a0845d0a,
      type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords: []
  - shader: {fileID: -6465566751694194690, guid: 171902f6490be574896e89d1a0845d0a,
      type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - _ADDITIONAL_LIGHTS_VERTEX
  - shader: {fileID: -6465566751694194690, guid: 171902f6490be574896e89d1a0845d0a,
      type: 3}
    passType: 8
    passId: 1
    subShaderIndex: 1
    upToDate: 1
    keywords: []
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _SUNDISK_NONE
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _SUNDISK_SIMPLE
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _SUNDISK_HIGH_QUALITY
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _SUNDISK_NONE
    - _SUNDISK_SIMPLE
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _SUNDISK_HIGH_QUALITY
    - _SUNDISK_SIMPLE
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_ALPHACLIP
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 205, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 200, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  _usedByLunaBuild:
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _SUNDISK_SIMPLE
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shader: {fileID: 202, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shader: {fileID: 10753, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shader: {fileID: 200, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shader: {fileID: 66, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 1
    upToDate: 0
    keywords:
    - _NORMALMAP
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 1
    upToDate: 0
    keywords: []
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 1
    upToDate: 0
    keywords:
    - _SURFACE_TYPE_TRANSPARENT
    - _RECEIVE_SHADOWS_OFF
  - shader: {fileID: 4800000, guid: 650dd9526735d5b46b79224bc6e94025, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 1
    upToDate: 0
    keywords: []
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 1
    upToDate: 0
    keywords:
    - _NORMALMAP
    - _SPECULAR_SETUP
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 8
    passId: 1
    subShaderIndex: 1
    upToDate: 0
    keywords: []
  - shader: {fileID: -6465566751694194690, guid: 171902f6490be574896e89d1a0845d0a,
      type: 3}
    passType: 8
    passId: 1
    subShaderIndex: 1
    upToDate: 0
    keywords: []
  - shader: {fileID: -6465566751694194690, guid: 171902f6490be574896e89d1a0845d0a,
      type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 1
    upToDate: 0
    keywords:
    - _ADDITIONAL_LIGHTS_VERTEX
  _includedShaderVariants: []
  _excludedShaderVariants: []
  version: 2702
  _shaderParsedShaders:
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: Hidden/BlitCopy
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Color;\nuniform highp sampler2D _MainTex;\nvarying
            highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid
            main()\n{\n    u_xlat0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0
            = u_xlat0 * _Color;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags: []
        definedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        keywordGroups: []
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags: []
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 33
        PlatformMask: -1
      Tags: []
      UsePass: 0
    Shader: {fileID: 66, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    shaderCompilerPlatform: 5
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: Hidden/Core/FallbackError
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0
            = vec4(1.0, 0.0, 1.0, 1.0);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags: []
        definedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _
        keywordGroups:
        - Keywords:
          - _
          - UNITY_SINGLE_PASS_STEREO
          - STEREO_INSTANCING_ON
          - STEREO_MULTIVIEW_ON
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags: []
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: -1
      Tags: []
      UsePass: 0
    Shader: {fileID: 4800000, guid: 36e335017ad71d54fbb10842863188ae, type: 3}
    ShaderPath: Packages/com.unity.render-pipelines.core/Runtime/FallbackShader.shader
    ShaderDefinedKeywords:
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    shaderCompilerPlatform: 5
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: Hidden/InternalErrorShader
        ShaderVariants: []
        definedKeywords: []
        keywordGroups: []
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags: []
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 227
        PlatformMask: 32
      Tags: []
      UsePass: 0
    Shader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
    ShaderPath: Library/unity default resources
    ShaderDefinedKeywords: []
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    shaderCompilerPlatform: 5
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: Hidden/Universal Render Pipeline/FallbackError
        ShaderVariants: []
        definedKeywords: []
        keywordGroups: []
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: RenderPipeline
          Value: UniversalPipeline
        - Key: RenderType
          Value: Opaque
        - Key: ShaderModel
          Value: 4.5
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1101803
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: RenderPipeline
        Value: UniversalPipeline
      - Key: RenderType
        Value: Opaque
      - Key: ShaderModel
        Value: 4.5
      UsePass: 0
    Shader: {fileID: 4800000, guid: e6e9a19c3678ded42a3bc431ebef7dbd, type: 3}
    ShaderPath: Packages/com.unity.render-pipelines.universal/Shaders/Utils/FallbackError.shader
    ShaderDefinedKeywords: []
    fallbackShader: {fileID: 4800000, guid: 36e335017ad71d54fbb10842863188ae, type: 3}
    CompilationErrors: []
    shaderCompilerPlatform: 5
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: Legacy Shaders/Particles/Additive
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TintColor;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_1;\nvoid
            main()\n{\n    u_xlat0 = vs_COLOR0 + vs_COLOR0;\n    u_xlat0 = u_xlat0
            * _TintColor;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n   
            u_xlat0 = u_xlat0 * u_xlat10_1;\n    SV_Target0.w = u_xlat0.w;\n    SV_Target0.w
            = clamp(SV_Target0.w, 0.0, 1.0);\n    SV_Target0.xyz = u_xlat0.xyz;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - SOFTPARTICLES_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - __
        keywordGroups:
        - Keywords:
          - __
          - SOFTPARTICLES_ON
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 200, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - SOFTPARTICLES_ON
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    shaderCompilerPlatform: 5
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: Legacy Shaders/Particles/Additive (Soft)
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat10_0 * vs_COLOR0;\n    SV_Target0.xyz
            = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - SOFTPARTICLES_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - __
        keywordGroups:
        - Keywords:
          - __
          - SOFTPARTICLES_ON
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 202, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - SOFTPARTICLES_ON
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    shaderCompilerPlatform: 5
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: Legacy Shaders/Particles/Multiply
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nmediump
            vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nfloat u_xlat1;\nvoid main()\n{\n   
            u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_0.w
            * vs_COLOR0.w;\n    u_xlat16_0 = vs_COLOR0 * u_xlat10_0 + vec4(-1.0,
            -1.0, -1.0, -1.0);\n    SV_Target0 = vec4(u_xlat1) * u_xlat16_0 + vec4(1.0,
            1.0, 1.0, 1.0);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - SOFTPARTICLES_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - __
        keywordGroups:
        - Keywords:
          - __
          - SOFTPARTICLES_ON
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: -1
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 205, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - SOFTPARTICLES_ON
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    shaderCompilerPlatform: 5
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: Shader Graphs/POLYGON_Zombie_URP
        ShaderVariants: []
        definedKeywords: []
        keywordGroups: []
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: LIGHTMODE
          Value: UniversalForward
        - Key: QUEUE
          Value: AlphaTest
        - Key: RenderPipeline
          Value: UniversalPipeline
        - Key: RenderType
          Value: Opaque
        - Key: ShaderGraphShader
          Value: true
        - Key: ShaderGraphTargetId
          Value: UniversalLitSubTarget
        - Key: UniversalMaterialType
          Value: Lit
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1101803
        PlatformMask: -33313
      - ShaderName: Shader Graphs/POLYGON_Zombie_URP
        ShaderVariants: []
        definedKeywords: []
        keywordGroups: []
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 2
        Tags:
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: QUEUE
          Value: AlphaTest
        - Key: RenderPipeline
          Value: UniversalPipeline
        - Key: RenderType
          Value: Opaque
        - Key: ShaderGraphShader
          Value: true
        - Key: ShaderGraphTargetId
          Value: UniversalLitSubTarget
        - Key: UniversalMaterialType
          Value: Lit
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1101803
        PlatformMask: -33313
      Tags:
      - Key: QUEUE
        Value: AlphaTest
      - Key: RenderPipeline
        Value: UniversalPipeline
      - Key: RenderType
        Value: Opaque
      - Key: ShaderGraphShader
        Value: true
      - Key: ShaderGraphTargetId
        Value: UniversalLitSubTarget
      - Key: UniversalMaterialType
        Value: Lit
      UsePass: 0
    - Index: 1
      Passes:
      - ShaderName: Shader Graphs/POLYGON_Zombie_URP
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute
            highp vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nattribute
            highp vec4 in_TEXCOORD1;\nvarying highp vec3 vs_INTERP2;\nvarying highp
            vec4 vs_INTERP4;\nvarying highp vec4 vs_INTERP5;\nvarying highp vec4
            vs_INTERP6;\nvarying highp vec4 vs_INTERP7;\nvarying highp vec3 vs_INTERP8;\nvarying
            highp vec3 vs_INTERP9;\nvarying highp vec3 vs_INTERP10;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nbvec3 u_xlatb5;\nfloat u_xlat18;\nbool u_xlatb18;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat18 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat18
            = inversesqrt(u_xlat18);\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n   
            u_xlat16_2.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2.x = u_xlat1.x *
            u_xlat1.x + (-u_xlat16_2.x);\n    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;\n   
            u_xlat16_4.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_4.y = dot(unity_SHBg,
            u_xlat16_3);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_2.xyz
            = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;\n    vs_INTERP9.xyz
            = u_xlat1.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr,
            u_xlat1);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_3.z
            = dot(unity_SHAb, u_xlat1);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n   
            u_xlat1.xyz = log2(abs(u_xlat16_2.xyz));\n    u_xlat1.xyz = u_xlat1.xyz
            * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n   
            u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlatb5.xyz
            = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009,
            0.0), u_xlat16_2.xyzx).xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(12.9232101,
            12.9232101, 12.9232101);\n    {\n        vec4 hlslcc_movcTemp = u_xlat1;\n       
            hlslcc_movcTemp.x = (u_xlatb5.x) ? u_xlat16_2.x : u_xlat1.x;\n       
            hlslcc_movcTemp.y = (u_xlatb5.y) ? u_xlat16_2.y : u_xlat1.y;\n       
            hlslcc_movcTemp.z = (u_xlatb5.z) ? u_xlat16_2.z : u_xlat1.z;\n       
            u_xlat1 = hlslcc_movcTemp;\n    }\n    u_xlat16_2.xyz = max(u_xlat1.xyz,
            vec3(0.0, 0.0, 0.0));\n    vs_INTERP2.xyz = u_xlat16_2.xyz;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat18
            = max(u_xlat18, 1.17549435e-38);\n    u_xlat18 = inversesqrt(u_xlat18);\n   
            vs_INTERP4.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n    vs_INTERP4.w = in_TANGENT0.w;\n   
            vs_INTERP5 = in_TEXCOORD0;\n    vs_INTERP6 = in_TEXCOORD1;\n    vs_INTERP7
            = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_INTERP8.xyz = u_xlat0.xyz;\n    u_xlat0.xyz
            = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlatb18 = unity_OrthoParams.w==0.0;\n   
            vs_INTERP10.x = (u_xlatb18) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n   
            vs_INTERP10.y = (u_xlatb18) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            vs_INTERP10.z = (u_xlatb18) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec2 _GlobalMipBias;\nuniform \tmediump vec4
            unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 Color_8948C9C;\nuniform lowp sampler2D Texture2D_558D75A3;\nuniform
            lowp sampler2D Texture2D_CD41C4EC;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec3 vs_INTERP2;\nvarying highp vec4 vs_INTERP5;\nvarying highp
            vec4 vs_INTERP6;\nvarying highp vec3 vs_INTERP9;\nvarying highp vec3
            vs_INTERP10;\n#define SV_TARGET0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            float u_xlat10_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nlowp
            vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3
            u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec3 u_xlat10_8;\nfloat
            u_xlat24;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_INTERP10.xyz, vs_INTERP10.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat8.xyz = u_xlat0.xxx * vs_INTERP10.xyz;\n    u_xlat1.xyz = vs_INTERP10.xyz
            * u_xlat0.xxx + _MainLightPosition.xyz;\n    u_xlat0.x = dot(vs_INTERP9.xyz,
            vs_INTERP9.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz
            = u_xlat0.xxx * vs_INTERP9.xyz;\n    u_xlat16_3.x = dot((-u_xlat8.xyz),
            u_xlat2.xyz);\n    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;\n    u_xlat16_3.xyz
            = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat8.xyz);\n    u_xlat16_27
            = dot(u_xlat2.xyz, u_xlat8.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27,
            0.0, 1.0);\n    u_xlat16_27 = (-u_xlat16_27) + 1.0;\n    u_xlat16_27
            = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n   
            u_xlat16_27 = u_xlat16_27 * 0.200000018 + 0.0399999991;\n    u_xlat0.x
            = u_xlat16_27 * 0.709421098;\n    u_xlat10_3 = textureCube(unity_SpecCube0,
            u_xlat16_3.xyz, 5.4720006);\n    u_xlat16_4.x = u_xlat10_3.w + -1.0;\n   
            u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x
            = max(u_xlat16_4.x, 0.0);\n    u_xlat16_4.x = log2(u_xlat16_4.x);\n   
            u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;\n    u_xlat16_4.x
            = exp2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * u_xlat16_4.xxx;\n    u_xlat16_4.xyz
            = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat10_0 = texture2D(Texture2D_CD41C4EC,
            vs_INTERP6.xy, _GlobalMipBias.x).x;\n    u_xlat10_8.xyz = texture2D(Texture2D_558D75A3,
            vs_INTERP5.xy, _GlobalMipBias.x).xyz;\n    u_xlat5.xyz = (-u_xlat10_8.xyz)
            + Color_8948C9C.xyz;\n    u_xlat0.xyz = vec3(u_xlat10_0) * u_xlat5.xyz
            + u_xlat10_8.xyz;\n    u_xlat16_6.xyz = u_xlat0.xyz * vec3(0.959999979,
            0.959999979, 0.959999979);\n    u_xlat16_4.xyz = vs_INTERP2.xyz * u_xlat16_6.xyz
            + u_xlat16_4.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz,
            u_xlat0.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.x
            = dot(_MainLightPosition.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_28 = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x =
            max(u_xlat16_28, 0.100000001);\n    u_xlat16_28 = dot(u_xlat2.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);\n    u_xlat16_28 = u_xlat16_28
            * unity_LightData.z;\n    u_xlat16_7.xyz = vec3(u_xlat16_28) * _MainLightColor.xyz;\n   
            u_xlat8.x = u_xlat24 * u_xlat24;\n    u_xlat8.x = u_xlat8.x * -0.590399981
            + 1.00001001;\n    u_xlat8.x = u_xlat8.x * u_xlat8.x;\n    u_xlat0.x
            = u_xlat0.x * u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * 4.56000042;\n   
            u_xlat0.x = 0.409600049 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351563e-05;\n   
            u_xlat16_6.xyz = vec3(u_xlat16_28) * vec3(0.0399999991, 0.0399999991,
            0.0399999991) + u_xlat16_6.xyz;\n    SV_TARGET0.xyz = u_xlat16_6.xyz
            * u_xlat16_7.xyz + u_xlat16_4.xyz;\n    SV_TARGET0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 1
          Keywords: []
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: AlphaTest
          - Key: RenderPipeline
            Value: UniversalPipeline
          - Key: RenderType
            Value: Opaque
          - Key: ShaderGraphShader
            Value: true
          - Key: ShaderGraphTargetId
            Value: UniversalLitSubTarget
          - Key: UniversalMaterialType
            Value: Lit
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[16];\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_LightIndices[2];\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute
            highp vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nattribute
            highp vec4 in_TEXCOORD1;\nvarying highp vec3 vs_INTERP2;\nvarying highp
            vec4 vs_INTERP4;\nvarying highp vec4 vs_INTERP5;\nvarying highp vec4
            vs_INTERP6;\nvarying highp vec4 vs_INTERP7;\nvarying highp vec3 vs_INTERP8;\nvarying
            highp vec3 vs_INTERP9;\nvarying highp vec3 vs_INTERP10;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nvec3 u_xlat5;\nint u_xlati5;\nbvec3 u_xlatb5;\nvec3
            u_xlat6;\nvec3 u_xlat12;\nfloat u_xlat13;\nmediump float u_xlat16_18;\nfloat
            u_xlat21;\nint u_xlati21;\nbool u_xlatb21;\nint u_xlati22;\nmediump float
            u_xlat16_24;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat21,
            1.17549435e-38);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz
            = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat2.xyz = in_TANGENT0.yyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat21 = max(u_xlat21, 1.17549435e-38);\n    u_xlat21 = inversesqrt(u_xlat21);\n   
            vs_INTERP4.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat2 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat2;\n    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlatb21 = unity_OrthoParams.w==0.0;\n    u_xlat2.xyz = (-u_xlat0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    vs_INTERP10.x = (u_xlatb21) ? u_xlat2.x
            : hlslcc_mtx4x4unity_MatrixV[0].z;\n    vs_INTERP10.y = (u_xlatb21) ?
            u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    vs_INTERP10.z = (u_xlatb21)
            ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat1.w = 1.0;\n   
            u_xlat16_3.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_3.y = dot(unity_SHAg,
            u_xlat1);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_2
            = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);\n   
            u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHBb,
            u_xlat16_2);\n    u_xlat16_24 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_24
            = u_xlat1.x * u_xlat1.x + (-u_xlat16_24);\n    u_xlat16_4.xyz = unity_SHC.xyz
            * vec3(u_xlat16_24) + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            + u_xlat16_4.xyz;\n    u_xlatb5.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_4.xyz
            = u_xlat16_3.xyz * vec3(12.9232101, 12.9232101, 12.9232101);\n    u_xlat6.xyz
            = log2(abs(u_xlat16_3.xyz));\n    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat6.xyz = exp2(u_xlat6.xyz);\n   
            u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat5.x =
            (u_xlatb5.x) ? u_xlat16_4.x : u_xlat6.x;\n    u_xlat5.y = (u_xlatb5.y)
            ? u_xlat16_4.y : u_xlat6.y;\n    u_xlat5.z = (u_xlatb5.z) ? u_xlat16_4.z
            : u_xlat6.z;\n    u_xlat16_3.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));\n   
            u_xlat16_24 = min(_AdditionalLightsCount.x, unity_LightData.y);\n   
            u_xlati21 = int(u_xlat16_24);\n    u_xlat16_2.y = float(0.0);\n    u_xlat16_2.z
            = float(0.0);\n    u_xlat16_2.w = float(0.0);\n    for(int u_xlati_loop_1
            = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n        u_xlatb5.x
            = u_xlati_loop_1>=u_xlati21;\n        if(u_xlatb5.x){\n            break;\n       
            }\n        u_xlat16_24 = float(u_xlati_loop_1);\n        u_xlatb5.x =
            u_xlat16_24<2.0;\n        u_xlat16_4.xy = (u_xlatb5.x) ? unity_LightIndices[0].xy
            : unity_LightIndices[0].zw;\n        u_xlat16_18 = u_xlat16_24 + -2.0;\n       
            u_xlat16_24 = (u_xlatb5.x) ? u_xlat16_24 : u_xlat16_18;\n        u_xlatb5.x
            = u_xlat16_24<1.0;\n        u_xlat16_24 = (u_xlatb5.x) ? u_xlat16_4.x
            : u_xlat16_4.y;\n        u_xlati5 = int(u_xlat16_24);\n        u_xlat12.xyz
            = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati5].www + _AdditionalLightsPosition[u_xlati5].xyz;\n       
            u_xlat6.x = dot(u_xlat12.xyz, u_xlat12.xyz);\n        u_xlat6.x = max(u_xlat6.x,
            6.10351563e-05);\n        u_xlat13 = inversesqrt(u_xlat6.x);\n       
            u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat13);\n        u_xlat13 = float(1.0)
            / u_xlat6.x;\n        u_xlat6.x = u_xlat6.x * _AdditionalLightsAttenuation[u_xlati5].x
            + _AdditionalLightsAttenuation[u_xlati5].y;\n        u_xlat6.x = clamp(u_xlat6.x,
            0.0, 1.0);\n        u_xlat6.x = u_xlat6.x * u_xlat13;\n        u_xlat16_24
            = dot(_AdditionalLightsSpotDir[u_xlati5].xyz, u_xlat12.xyz);\n       
            u_xlat16_24 = u_xlat16_24 * _AdditionalLightsAttenuation[u_xlati5].z
            + _AdditionalLightsAttenuation[u_xlati5].w;\n        u_xlat16_24 = clamp(u_xlat16_24,
            0.0, 1.0);\n        u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n       
            u_xlat6.x = u_xlat16_24 * u_xlat6.x;\n        u_xlat6.xyz = u_xlat6.xxx
            * _AdditionalLightsColor[u_xlati5].xyz;\n        u_xlat16_24 = dot(u_xlat1.xyz,
            u_xlat12.xyz);\n        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n       
            u_xlat16_2.yzw = u_xlat6.xyz * vec3(u_xlat16_24) + u_xlat16_2.yzw;\n   
            }\n    vs_INTERP4.w = in_TANGENT0.w;\n    vs_INTERP5 = in_TEXCOORD0;\n   
            vs_INTERP6 = in_TEXCOORD1;\n    u_xlat16_2.x = 0.0;\n    vs_INTERP7 =
            u_xlat16_2;\n    vs_INTERP2.xyz = u_xlat16_3.xyz;\n    vs_INTERP8.xyz
            = u_xlat0.xyz;\n    vs_INTERP9.xyz = u_xlat1.xyz;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec2 _GlobalMipBias;\nuniform \tmediump vec4
            unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 Color_8948C9C;\nuniform lowp sampler2D Texture2D_558D75A3;\nuniform
            lowp sampler2D Texture2D_CD41C4EC;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec3 vs_INTERP2;\nvarying highp vec4 vs_INTERP5;\nvarying highp
            vec4 vs_INTERP6;\nvarying highp vec4 vs_INTERP7;\nvarying highp vec3
            vs_INTERP9;\nvarying highp vec3 vs_INTERP10;\n#define SV_TARGET0 gl_FragData[0]\nvec3
            u_xlat0;\nlowp float u_xlat10_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump
            vec3 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec3
            u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump
            vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec3 u_xlat10_9;\nfloat u_xlat27;\nmediump
            float u_xlat16_30;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_INTERP10.xyz, vs_INTERP10.xyz);\n    u_xlat0.x = max(u_xlat0.x,
            1.17549435e-38);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat9.xyz
            = u_xlat0.xxx * vs_INTERP10.xyz;\n    u_xlat1.xyz = vs_INTERP10.xyz *
            u_xlat0.xxx + _MainLightPosition.xyz;\n    u_xlat0.x = dot(vs_INTERP9.xyz,
            vs_INTERP9.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz
            = u_xlat0.xxx * vs_INTERP9.xyz;\n    u_xlat16_3.x = dot((-u_xlat9.xyz),
            u_xlat2.xyz);\n    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;\n    u_xlat16_3.xyz
            = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat9.xyz);\n    u_xlat16_30
            = dot(u_xlat2.xyz, u_xlat9.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30,
            0.0, 1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30
            = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n   
            u_xlat16_30 = u_xlat16_30 * 0.200000018 + 0.0399999991;\n    u_xlat0.x
            = u_xlat16_30 * 0.709421098;\n    u_xlat10_3 = textureCube(unity_SpecCube0,
            u_xlat16_3.xyz, 5.4720006);\n    u_xlat16_4.x = u_xlat10_3.w + -1.0;\n   
            u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x
            = max(u_xlat16_4.x, 0.0);\n    u_xlat16_4.x = log2(u_xlat16_4.x);\n   
            u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;\n    u_xlat16_4.x
            = exp2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n   
            u_xlat16_4.xyz = u_xlat10_3.xyz * u_xlat16_4.xxx;\n    u_xlat16_4.xyz
            = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat10_0 = texture2D(Texture2D_CD41C4EC,
            vs_INTERP6.xy, _GlobalMipBias.x).x;\n    u_xlat10_9.xyz = texture2D(Texture2D_558D75A3,
            vs_INTERP5.xy, _GlobalMipBias.x).xyz;\n    u_xlat5.xyz = (-u_xlat10_9.xyz)
            + Color_8948C9C.xyz;\n    u_xlat0.xyz = vec3(u_xlat10_0) * u_xlat5.xyz
            + u_xlat10_9.xyz;\n    u_xlat16_6.xyz = u_xlat0.xyz * vec3(0.959999979,
            0.959999979, 0.959999979);\n    u_xlat16_4.xyz = vs_INTERP2.xyz * u_xlat16_6.xyz
            + u_xlat16_4.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;\n    u_xlat27 = dot(u_xlat2.xyz,
            u_xlat0.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.x
            = dot(_MainLightPosition.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat16_31 = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x =
            max(u_xlat16_31, 0.100000001);\n    u_xlat16_31 = dot(u_xlat2.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_31 = u_xlat16_31
            * unity_LightData.z;\n    u_xlat16_7.xyz = vec3(u_xlat16_31) * _MainLightColor.xyz;\n   
            u_xlat9.x = u_xlat27 * u_xlat27;\n    u_xlat9.x = u_xlat9.x * -0.590399981
            + 1.00001001;\n    u_xlat9.x = u_xlat9.x * u_xlat9.x;\n    u_xlat0.x
            = u_xlat0.x * u_xlat9.x;\n    u_xlat0.x = u_xlat0.x * 4.56000042;\n   
            u_xlat0.x = 0.409600049 / u_xlat0.x;\n    u_xlat16_31 = u_xlat0.x + -6.10351563e-05;\n   
            u_xlat16_8.xyz = vec3(u_xlat16_31) * vec3(0.0399999991, 0.0399999991,
            0.0399999991) + u_xlat16_6.xyz;\n    u_xlat16_4.xyz = u_xlat16_8.xyz
            * u_xlat16_7.xyz + u_xlat16_4.xyz;\n    SV_TARGET0.xyz = vs_INTERP7.yzw
            * u_xlat16_6.xyz + u_xlat16_4.xyz;\n    SV_TARGET0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 4
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - _ADDITIONAL_LIGHTS_VERTEX
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: AlphaTest
          - Key: RenderPipeline
            Value: UniversalPipeline
          - Key: RenderType
            Value: Opaque
          - Key: ShaderGraphShader
            Value: true
          - Key: ShaderGraphTargetId
            Value: UniversalLitSubTarget
          - Key: UniversalMaterialType
            Value: Lit
        definedKeywords:
        - DEBUG_DISPLAY
        - DIRLIGHTMAP_COMBINED
        - DYNAMICLIGHTMAP_ON
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - INSTANCING_ON
        - LIGHTMAP_ON
        - LIGHTMAP_SHADOW_MIXING
        - SHADOWS_SHADOWMASK
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _ADDITIONAL_LIGHTS
        - _ADDITIONAL_LIGHTS_VERTEX
        - _ADDITIONAL_LIGHT_SHADOWS
        - _CLUSTERED_RENDERING
        - _DBUFFER_MRT1
        - _DBUFFER_MRT2
        - _DBUFFER_MRT3
        - _LIGHT_COOKIES
        - _LIGHT_LAYERS
        - _MAIN_LIGHT_SHADOWS
        - _MAIN_LIGHT_SHADOWS_CASCADE
        - _MAIN_LIGHT_SHADOWS_SCREEN
        - _REFLECTION_PROBE_BLENDING
        - _REFLECTION_PROBE_BOX_PROJECTION
        - _SCREEN_SPACE_OCCLUSION
        - _SHADOWS_SOFT
        - _
        - __
        keywordGroups:
        - Keywords:
          - _
          - LIGHTMAP_ON
        - Keywords:
          - _
          - DYNAMICLIGHTMAP_ON
        - Keywords:
          - _
          - DIRLIGHTMAP_COMBINED
        - Keywords:
          - _
          - _MAIN_LIGHT_SHADOWS
          - _MAIN_LIGHT_SHADOWS_CASCADE
          - _MAIN_LIGHT_SHADOWS_SCREEN
        - Keywords:
          - _
          - _ADDITIONAL_LIGHTS_VERTEX
          - _ADDITIONAL_LIGHTS
        - Keywords:
          - _
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - _
          - SHADOWS_SHADOWMASK
        - Keywords:
          - _
          - _CLUSTERED_RENDERING
        - Keywords:
          - __
          - INSTANCING_ON
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 1
        SerializedObjectId: 0
        Tags:
        - Key: LIGHTMODE
          Value: UniversalForward
        - Key: QUEUE
          Value: AlphaTest
        - Key: RenderPipeline
          Value: UniversalPipeline
        - Key: RenderType
          Value: Opaque
        - Key: ShaderGraphShader
          Value: true
        - Key: ShaderGraphTargetId
          Value: UniversalLitSubTarget
        - Key: UniversalMaterialType
          Value: Lit
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: 33328
      - ShaderName: Shader Graphs/POLYGON_Zombie_URP
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _ShadowBias;\nuniform \tvec3 _LightDirection;\nattribute highp
            vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec3
            vs_INTERP0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;\n   
            u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = max(u_xlat6,
            1.17549435e-38);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat1.xyz
            = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat6 = dot(_LightDirection.xyz,
            u_xlat1.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 =
            (-u_xlat6) + 1.0;\n    u_xlat6 = u_xlat6 * _ShadowBias.y;\n    u_xlat0.xyz
            = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;\n    vs_INTERP0.xyz = u_xlat1.xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position.z = max(u_xlat0.z,
            -1.0);\n    gl_Position.xyw = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\n#define SV_TARGET0 gl_FragData[0]\nvoid main()\n{\n    SV_TARGET0
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 1
          SubShaderIndex: 1
          Keywords: []
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: QUEUE
            Value: AlphaTest
          - Key: RenderPipeline
            Value: UniversalPipeline
          - Key: RenderType
            Value: Opaque
          - Key: ShaderGraphShader
            Value: true
          - Key: ShaderGraphTargetId
            Value: UniversalLitSubTarget
          - Key: UniversalMaterialType
            Value: Lit
        definedKeywords:
        - INSTANCING_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _CASTING_PUNCTUAL_LIGHT_SHADOW
        - _
        - __
        keywordGroups:
        - Keywords:
          - _
          - _CASTING_PUNCTUAL_LIGHT_SHADOW
        - Keywords:
          - __
          - INSTANCING_ON
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 1
        SerializedObjectId: 1
        Tags:
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: QUEUE
          Value: AlphaTest
        - Key: RenderPipeline
          Value: UniversalPipeline
        - Key: RenderType
          Value: Opaque
        - Key: ShaderGraphShader
          Value: true
        - Key: ShaderGraphTargetId
          Value: UniversalLitSubTarget
        - Key: UniversalMaterialType
          Value: Lit
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: 33328
      Tags:
      - Key: QUEUE
        Value: AlphaTest
      - Key: RenderPipeline
        Value: UniversalPipeline
      - Key: RenderType
        Value: Opaque
      - Key: ShaderGraphShader
        Value: true
      - Key: ShaderGraphTargetId
        Value: UniversalLitSubTarget
      - Key: UniversalMaterialType
        Value: Lit
      UsePass: 0
    Shader: {fileID: -6465566751694194690, guid: 171902f6490be574896e89d1a0845d0a,
      type: 3}
    ShaderPath: Assets/Art/Shaders/POLYGON_Zombie_URP.shadergraph
    ShaderDefinedKeywords:
    - DIRLIGHTMAP_COMBINED
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - LIGHTMAP_ON
    - SHADOWS_SHADOWMASK
    - _ADDITIONAL_LIGHTS
    - _ADDITIONAL_LIGHTS_VERTEX
    - _LIGHT_COOKIES
    - _MIXED_LIGHTING_SUBTRACTIVE
    - DEBUG_DISPLAY
    - DYNAMICLIGHTMAP_ON
    - INSTANCING_ON
    - LIGHTMAP_SHADOW_MIXING
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _ADDITIONAL_LIGHT_SHADOWS
    - _CLUSTERED_RENDERING
    - _DBUFFER_MRT1
    - _DBUFFER_MRT2
    - _DBUFFER_MRT3
    - _LIGHT_LAYERS
    - _MAIN_LIGHT_SHADOWS
    - _MAIN_LIGHT_SHADOWS_CASCADE
    - _MAIN_LIGHT_SHADOWS_SCREEN
    - _REFLECTION_PROBE_BLENDING
    - _REFLECTION_PROBE_BOX_PROJECTION
    - _SCREEN_SPACE_OCCLUSION
    - _SHADOWS_SOFT
    - _
    - __
    - _CASTING_PUNCTUAL_LIGHT_SHADOW
    fallbackShader: {fileID: 4800000, guid: da07703fcc09f8d4799221050659bd55, type: 3}
    CompilationErrors: []
    shaderCompilerPlatform: 5
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: Skybox/Procedural
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform
            \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nattribute
            highp vec4 in_POSITION0;\nvarying mediump float vs_TEXCOORD0;\nvarying
            mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nvec3
            u_xlat13;\nfloat u_xlat16;\nfloat u_xlat21;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat
            u_xlat26;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042,
            0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz
            = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n   
            u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x =
            log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n   
            u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx
            * vec2(0.049999997, 0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) *
            u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n       
            u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x
            = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n       
            u_xlat8 = (-u_xlat0.y) * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8
            * 5.25 + -6.80000019;\n        u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n       
            u_xlat16 = u_xlat8 * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8
            * u_xlat16 + -0.00286999997;\n        u_xlat8 = u_xlat8 * 1.44269502;\n       
            u_xlat0.y = exp2(u_xlat8);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5,
            0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002,
            0.0);\n        u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat24
            = sqrt(u_xlat24);\n        u_xlat25 = (-u_xlat24) + 1.0;\n        u_xlat25
            = u_xlat25 * 230.831207;\n        u_xlat25 = exp2(u_xlat25);\n       
            u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat26
            = u_xlat26 / u_xlat24;\n        u_xlat28 = dot(u_xlat2.xyz, u_xlat4.xyz);\n       
            u_xlat24 = u_xlat28 / u_xlat24;\n        u_xlat26 = (-u_xlat26) + 1.0;\n       
            u_xlat28 = u_xlat26 * 5.25 + -6.80000019;\n        u_xlat28 = u_xlat26
            * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat26 * u_xlat28 + 0.458999991;\n       
            u_xlat26 = u_xlat26 * u_xlat28 + -0.00286999997;\n        u_xlat26 =
            u_xlat26 * 1.44269502;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat24
            = (-u_xlat24) + 1.0;\n        u_xlat28 = u_xlat24 * 5.25 + -6.80000019;\n       
            u_xlat28 = u_xlat24 * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat24
            * u_xlat28 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat28 + -0.00286999997;\n       
            u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n       
            u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat26 * 0.25 + (-u_xlat24);\n       
            u_xlat24 = u_xlat25 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24,
            0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat5.xyz =
            u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat6.xyz = (-vec3(u_xlat24)) * u_xlat5.xyz;\n        u_xlat6.xyz =
            u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz
            = exp2(u_xlat6.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat25;\n       
            u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat25 = (-u_xlat0.x) + 1.0;\n        u_xlat25 = u_xlat25 * 230.831207;\n       
            u_xlat25 = exp2(u_xlat25);\n        u_xlat26 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n        u_xlat26 = u_xlat26 / u_xlat0.x;\n        u_xlat4.x
            = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n       
            u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat4.x = u_xlat26 * 5.25 +
            -6.80000019;\n        u_xlat4.x = u_xlat26 * u_xlat4.x + 3.82999992;\n       
            u_xlat4.x = u_xlat26 * u_xlat4.x + 0.458999991;\n        u_xlat26 = u_xlat26
            * u_xlat4.x + -0.00286999997;\n        u_xlat26 = u_xlat26 * 1.44269502;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x
            * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat26 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat25 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat25;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz
            * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz *
            u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat26 = min(u_xlat2.y, -0.00100000005);\n       
            u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat5.xyz = vec3(u_xlat26)
            * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz),
            u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n       
            u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat21 = u_xlat5.y
            * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.y * u_xlat21 + 3.82999992;\n       
            u_xlat21 = u_xlat5.y * u_xlat21 + 0.458999991;\n        u_xlat13.x =
            u_xlat5.y * u_xlat21 + -0.00286999997;\n        u_xlat13.x = u_xlat13.x
            * 1.44269502;\n        u_xlat5.y = exp2(u_xlat13.x);\n        u_xlat21
            = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.x * u_xlat21
            + 3.82999992;\n        u_xlat21 = u_xlat5.x * u_xlat21 + 0.458999991;\n       
            u_xlat5.x = u_xlat5.x * u_xlat21 + -0.00286999997;\n        u_xlat5.xyz
            = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x
            = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n       
            u_xlat13.xz = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat6.xyz
            = u_xlat2.xyz * u_xlat13.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 =
            (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat5.x = u_xlat26 * u_xlat5.x
            + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x
            = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz
            = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz *
            vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n       
            u_xlat26 = u_xlat13.z * u_xlat26;\n        u_xlat5.xyz = u_xlat0.xyz
            * vec3(u_xlat26);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx
            + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz
            = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat26 = u_xlat2.y * -50.0;\n   
            u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z)
            * vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z);\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_27 = dot(_WorldSpaceLightPos0.xyz,
            (-u_xlat2.xyz));\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27
            = u_xlat16_27 * 0.75 + 0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_27)
            * u_xlat16_4.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n   
            vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n   
            vs_TEXCOORD0 = u_xlat26;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nvarying mediump float vs_TEXCOORD0;\nvarying mediump vec3
            vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nmediump float u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid
            main()\n{\n    u_xlat16_0 = vs_TEXCOORD0;\n    u_xlat16_0 = clamp(u_xlat16_0,
            0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n   
            SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_NONE
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform
            \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform
            \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying
            mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat
            u_xlat9;\nvec3 u_xlat14;\nfloat u_xlat18;\nfloat u_xlat23;\nfloat u_xlat27;\nfloat
            u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042,
            0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz
            = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n   
            u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x =
            log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n   
            u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx
            * vec2(0.049999997, 0.0314159282);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) *
            u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n       
            u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x
            = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat27 + u_xlat0.x;\n       
            u_xlat9 = (-u_xlat0.y) * u_xlat27 + 1.0;\n        u_xlat18 = u_xlat9
            * 5.25 + -6.80000019;\n        u_xlat18 = u_xlat9 * u_xlat18 + 3.82999992;\n       
            u_xlat18 = u_xlat9 * u_xlat18 + 0.458999991;\n        u_xlat9 = u_xlat9
            * u_xlat18 + -0.00286999997;\n        u_xlat9 = u_xlat9 * 1.44269502;\n       
            u_xlat0.y = exp2(u_xlat9);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5,
            0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002,
            0.0);\n        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat27
            = sqrt(u_xlat27);\n        u_xlat28 = (-u_xlat27) + 1.0;\n        u_xlat28
            = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29
            = u_xlat29 / u_xlat27;\n        u_xlat31 = dot(u_xlat2.xyz, u_xlat4.xyz);\n       
            u_xlat27 = u_xlat31 / u_xlat27;\n        u_xlat29 = (-u_xlat29) + 1.0;\n       
            u_xlat31 = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat29
            * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat29 * u_xlat31 + 0.458999991;\n       
            u_xlat29 = u_xlat29 * u_xlat31 + -0.00286999997;\n        u_xlat29 =
            u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat27
            = (-u_xlat27) + 1.0;\n        u_xlat31 = u_xlat27 * 5.25 + -6.80000019;\n       
            u_xlat31 = u_xlat27 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat27
            * u_xlat31 + 0.458999991;\n        u_xlat27 = u_xlat27 * u_xlat31 + -0.00286999997;\n       
            u_xlat27 = u_xlat27 * 1.44269502;\n        u_xlat27 = exp2(u_xlat27);\n       
            u_xlat27 = u_xlat27 * 0.25;\n        u_xlat27 = u_xlat29 * 0.25 + (-u_xlat27);\n       
            u_xlat27 = u_xlat28 * u_xlat27 + u_xlat0.y;\n        u_xlat27 = max(u_xlat27,
            0.0);\n        u_xlat27 = min(u_xlat27, 50.0);\n        u_xlat5.xyz =
            u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat6.xyz = (-vec3(u_xlat27)) * u_xlat5.xyz;\n        u_xlat6.xyz =
            u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz
            = exp2(u_xlat6.xyz);\n        u_xlat27 = u_xlat0.z * u_xlat28;\n       
            u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat28 = (-u_xlat0.x) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat0.x;\n        u_xlat4.x
            = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n       
            u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat4.x = u_xlat29 * 5.25 +
            -6.80000019;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 3.82999992;\n       
            u_xlat4.x = u_xlat29 * u_xlat4.x + 0.458999991;\n        u_xlat29 = u_xlat29
            * u_xlat4.x + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x
            * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat29 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat28 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat28;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz
            * vec3(u_xlat27) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz *
            u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat29 = min(u_xlat2.y, -0.00100000005);\n       
            u_xlat29 = -9.99999975e-05 / u_xlat29;\n        u_xlat5.xyz = vec3(u_xlat29)
            * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz),
            u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n       
            u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat23 = u_xlat5.y
            * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 3.82999992;\n       
            u_xlat23 = u_xlat5.y * u_xlat23 + 0.458999991;\n        u_xlat14.x =
            u_xlat5.y * u_xlat23 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x
            * 1.44269502;\n        u_xlat5.y = exp2(u_xlat14.x);\n        u_xlat23
            = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.x * u_xlat23
            + 3.82999992;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 0.458999991;\n       
            u_xlat5.x = u_xlat5.x * u_xlat23 + -0.00286999997;\n        u_xlat5.xyz
            = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x
            = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n       
            u_xlat14.xz = vec2(u_xlat29) * vec2(0.5, 20.0);\n        u_xlat6.xyz
            = u_xlat2.xyz * u_xlat14.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat29 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat29 = sqrt(u_xlat29);\n        u_xlat29 =
            (-u_xlat29) + 1.0;\n        u_xlat29 = u_xlat29 * 230.831207;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat5.x = u_xlat29 * u_xlat5.x
            + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x
            = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz
            = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz *
            vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n       
            u_xlat29 = u_xlat14.z * u_xlat29;\n        u_xlat5.xyz = u_xlat0.xyz
            * vec3(u_xlat29);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx
            + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz
            = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x,
            _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y,
            _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz
            + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n   
            u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_30
            = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * 0.75 +
            0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_4.xyz;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    u_xlat16_30 =
            dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_30 = sqrt(u_xlat16_30);\n   
            u_xlat16_30 = max(u_xlat16_30, 0.25);\n    u_xlat16_30 = min(u_xlat16_30,
            1.0);\n    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(8000.0, 8000.0, 8000.0);\n   
            u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);\n    u_xlat16_8.xyz
            = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz
            * vec3(27.0, 27.0, 27.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz / vec3(u_xlat16_30);\n   
            vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n   
            vs_TEXCOORD3.xyz = sqrt(u_xlat16_8.xyz);\n    vs_TEXCOORD0.xyz = (-u_xlat2.xyz);\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float
            _SunSize;\nvarying mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define
            SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nbool
            u_xlatb2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0.xyz
            = vs_TEXCOORD0.xyz + _WorldSpaceLightPos0.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz,
            u_xlat16_0.xyz);\n    u_xlat16_0.x = sqrt(u_xlat16_0.x);\n    u_xlat16_3.x
            = float(1.0) / _SunSize;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x;\n   
            u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_0.x
            * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x
            = (-u_xlat16_3.x) * u_xlat16_0.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x
            * u_xlat16_0.x;\n    u_xlat16_3.x = vs_TEXCOORD0.y * 50.0;\n    u_xlat16_3.x
            = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz
            + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_1.xyz
            + vs_TEXCOORD2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx
            + u_xlat16_3.xyz;\n    u_xlatb2 = vs_TEXCOORD0.y<0.0;\n    SV_Target0.xyz
            = (bool(u_xlatb2)) ? u_xlat16_1.xyz : u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_SIMPLE
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform
            \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform
            \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat
            u_xlat9;\nvec3 u_xlat14;\nfloat u_xlat18;\nfloat u_xlat23;\nfloat u_xlat27;\nfloat
            u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042,
            0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz
            = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n   
            u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x =
            log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n   
            u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx
            * vec2(0.049999997, 0.0314159282);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) *
            u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n       
            u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x
            = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat27 + u_xlat0.x;\n       
            u_xlat9 = (-u_xlat0.y) * u_xlat27 + 1.0;\n        u_xlat18 = u_xlat9
            * 5.25 + -6.80000019;\n        u_xlat18 = u_xlat9 * u_xlat18 + 3.82999992;\n       
            u_xlat18 = u_xlat9 * u_xlat18 + 0.458999991;\n        u_xlat9 = u_xlat9
            * u_xlat18 + -0.00286999997;\n        u_xlat9 = u_xlat9 * 1.44269502;\n       
            u_xlat0.y = exp2(u_xlat9);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5,
            0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002,
            0.0);\n        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat27
            = sqrt(u_xlat27);\n        u_xlat28 = (-u_xlat27) + 1.0;\n        u_xlat28
            = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29
            = u_xlat29 / u_xlat27;\n        u_xlat31 = dot(u_xlat2.xyz, u_xlat4.xyz);\n       
            u_xlat27 = u_xlat31 / u_xlat27;\n        u_xlat29 = (-u_xlat29) + 1.0;\n       
            u_xlat31 = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat29
            * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat29 * u_xlat31 + 0.458999991;\n       
            u_xlat29 = u_xlat29 * u_xlat31 + -0.00286999997;\n        u_xlat29 =
            u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat27
            = (-u_xlat27) + 1.0;\n        u_xlat31 = u_xlat27 * 5.25 + -6.80000019;\n       
            u_xlat31 = u_xlat27 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat27
            * u_xlat31 + 0.458999991;\n        u_xlat27 = u_xlat27 * u_xlat31 + -0.00286999997;\n       
            u_xlat27 = u_xlat27 * 1.44269502;\n        u_xlat27 = exp2(u_xlat27);\n       
            u_xlat27 = u_xlat27 * 0.25;\n        u_xlat27 = u_xlat29 * 0.25 + (-u_xlat27);\n       
            u_xlat27 = u_xlat28 * u_xlat27 + u_xlat0.y;\n        u_xlat27 = max(u_xlat27,
            0.0);\n        u_xlat27 = min(u_xlat27, 50.0);\n        u_xlat5.xyz =
            u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat6.xyz = (-vec3(u_xlat27)) * u_xlat5.xyz;\n        u_xlat6.xyz =
            u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz
            = exp2(u_xlat6.xyz);\n        u_xlat27 = u_xlat0.z * u_xlat28;\n       
            u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat28 = (-u_xlat0.x) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat0.x;\n        u_xlat4.x
            = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n       
            u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat4.x = u_xlat29 * 5.25 +
            -6.80000019;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 3.82999992;\n       
            u_xlat4.x = u_xlat29 * u_xlat4.x + 0.458999991;\n        u_xlat29 = u_xlat29
            * u_xlat4.x + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x
            * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat29 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat28 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat28;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz
            * vec3(u_xlat27) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz *
            u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat29 = min(u_xlat2.y, -0.00100000005);\n       
            u_xlat29 = -9.99999975e-05 / u_xlat29;\n        u_xlat5.xyz = vec3(u_xlat29)
            * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz),
            u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n       
            u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat23 = u_xlat5.y
            * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 3.82999992;\n       
            u_xlat23 = u_xlat5.y * u_xlat23 + 0.458999991;\n        u_xlat14.x =
            u_xlat5.y * u_xlat23 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x
            * 1.44269502;\n        u_xlat5.y = exp2(u_xlat14.x);\n        u_xlat23
            = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.x * u_xlat23
            + 3.82999992;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 0.458999991;\n       
            u_xlat5.x = u_xlat5.x * u_xlat23 + -0.00286999997;\n        u_xlat5.xyz
            = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x
            = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n       
            u_xlat14.xz = vec2(u_xlat29) * vec2(0.5, 20.0);\n        u_xlat6.xyz
            = u_xlat2.xyz * u_xlat14.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat29 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat29 = sqrt(u_xlat29);\n        u_xlat29 =
            (-u_xlat29) + 1.0;\n        u_xlat29 = u_xlat29 * 230.831207;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat5.x = u_xlat29 * u_xlat5.x
            + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x
            = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz
            = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz *
            vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n       
            u_xlat29 = u_xlat14.z * u_xlat29;\n        u_xlat5.xyz = u_xlat0.xyz
            * vec3(u_xlat29);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx
            + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz
            = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x,
            _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y,
            _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz
            + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n   
            u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_30
            = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * 0.75 +
            0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_4.xyz;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    u_xlat16_30 =
            dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_30 = sqrt(u_xlat16_30);\n   
            u_xlat16_30 = max(u_xlat16_30, 0.25);\n    u_xlat16_30 = min(u_xlat16_30,
            1.0);\n    u_xlat16_0.xyz = u_xlat16_0.xyz;\n    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz,
            0.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n   
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(15.0, 15.0, 15.0);\n    u_xlat16_8.xyz
            = u_xlat16_8.xyz / vec3(u_xlat16_30);\n    vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n   
            vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n    vs_TEXCOORD3.xyz = sqrt(u_xlat16_8.xyz);\n   
            vs_TEXCOORD0.xyz = (-u_xlat2.xyz);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float
            _SunSize;\nuniform \tmediump float _SunSizeConvergence;\nvarying highp
            vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump
            vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nmediump vec2 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_6;\nvoid
            main()\n{\n    u_xlat16_0.x = log2(_SunSize);\n    u_xlat16_0.x = u_xlat16_0.x
            * 0.649999976;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat1.x
            = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n   
            u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD0.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz,
            (-u_xlat1.xyz));\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n   
            u_xlat16_3.x = log2(u_xlat16_3.x);\n    u_xlat16_3.x = u_xlat16_3.x *
            _SunSizeConvergence;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_6
            = (-u_xlat16_3.x) * 1.98000002 + 1.98010004;\n    u_xlat16_0.y = u_xlat16_3.x
            * u_xlat16_3.x + 1.0;\n    u_xlat16_0.xy = u_xlat16_0.xy * vec2(10.0,
            0.0100164423);\n    u_xlat16_6 = log2(u_xlat16_6);\n    u_xlat16_0.x
            = u_xlat16_6 * u_xlat16_0.x;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n   
            u_xlat16_0.x = max(u_xlat16_0.x, 9.99999975e-05);\n    u_xlat16_0.x =
            u_xlat16_0.y / u_xlat16_0.x;\n    u_xlat16_0.x = log2(u_xlat16_0.x);\n   
            u_xlat16_0.x = u_xlat16_0.x * 0.454544991;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n   
            u_xlat16_3.x = u_xlat1.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x,
            0.0, 1.0);\n    u_xlatb1 = u_xlat1.y<0.0;\n    u_xlat16_2.xyz = vs_TEXCOORD1.xyz
            + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz
            + vs_TEXCOORD2.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx
            + u_xlat16_3.xyz;\n    SV_Target0.xyz = (bool(u_xlatb1)) ? u_xlat16_2.xyz
            : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_HIGH_QUALITY
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform
            \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nattribute
            highp vec4 in_POSITION0;\nvarying mediump float vs_TEXCOORD0;\nvarying
            mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nvec3
            u_xlat13;\nfloat u_xlat16;\nfloat u_xlat21;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat
            u_xlat26;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042,
            0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz
            = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n   
            u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x =
            log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n   
            u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx
            * vec2(0.049999997, 0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) *
            u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n       
            u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x
            = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n       
            u_xlat8 = (-u_xlat0.y) * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8
            * 5.25 + -6.80000019;\n        u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n       
            u_xlat16 = u_xlat8 * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8
            * u_xlat16 + -0.00286999997;\n        u_xlat8 = u_xlat8 * 1.44269502;\n       
            u_xlat0.y = exp2(u_xlat8);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5,
            0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002,
            0.0);\n        u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat24
            = sqrt(u_xlat24);\n        u_xlat25 = (-u_xlat24) + 1.0;\n        u_xlat25
            = u_xlat25 * 230.831207;\n        u_xlat25 = exp2(u_xlat25);\n       
            u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat26
            = u_xlat26 / u_xlat24;\n        u_xlat28 = dot(u_xlat2.xyz, u_xlat4.xyz);\n       
            u_xlat24 = u_xlat28 / u_xlat24;\n        u_xlat26 = (-u_xlat26) + 1.0;\n       
            u_xlat28 = u_xlat26 * 5.25 + -6.80000019;\n        u_xlat28 = u_xlat26
            * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat26 * u_xlat28 + 0.458999991;\n       
            u_xlat26 = u_xlat26 * u_xlat28 + -0.00286999997;\n        u_xlat26 =
            u_xlat26 * 1.44269502;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat24
            = (-u_xlat24) + 1.0;\n        u_xlat28 = u_xlat24 * 5.25 + -6.80000019;\n       
            u_xlat28 = u_xlat24 * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat24
            * u_xlat28 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat28 + -0.00286999997;\n       
            u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n       
            u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat26 * 0.25 + (-u_xlat24);\n       
            u_xlat24 = u_xlat25 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24,
            0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat5.xyz =
            u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat6.xyz = (-vec3(u_xlat24)) * u_xlat5.xyz;\n        u_xlat6.xyz =
            u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz
            = exp2(u_xlat6.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat25;\n       
            u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat25 = (-u_xlat0.x) + 1.0;\n        u_xlat25 = u_xlat25 * 230.831207;\n       
            u_xlat25 = exp2(u_xlat25);\n        u_xlat26 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n        u_xlat26 = u_xlat26 / u_xlat0.x;\n        u_xlat4.x
            = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n       
            u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat4.x = u_xlat26 * 5.25 +
            -6.80000019;\n        u_xlat4.x = u_xlat26 * u_xlat4.x + 3.82999992;\n       
            u_xlat4.x = u_xlat26 * u_xlat4.x + 0.458999991;\n        u_xlat26 = u_xlat26
            * u_xlat4.x + -0.00286999997;\n        u_xlat26 = u_xlat26 * 1.44269502;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x
            * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat26 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat25 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat25;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz
            * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz *
            u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat26 = min(u_xlat2.y, -0.00100000005);\n       
            u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat5.xyz = vec3(u_xlat26)
            * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz),
            u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n       
            u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat21 = u_xlat5.y
            * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.y * u_xlat21 + 3.82999992;\n       
            u_xlat21 = u_xlat5.y * u_xlat21 + 0.458999991;\n        u_xlat13.x =
            u_xlat5.y * u_xlat21 + -0.00286999997;\n        u_xlat13.x = u_xlat13.x
            * 1.44269502;\n        u_xlat5.y = exp2(u_xlat13.x);\n        u_xlat21
            = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.x * u_xlat21
            + 3.82999992;\n        u_xlat21 = u_xlat5.x * u_xlat21 + 0.458999991;\n       
            u_xlat5.x = u_xlat5.x * u_xlat21 + -0.00286999997;\n        u_xlat5.xyz
            = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x
            = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n       
            u_xlat13.xz = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat6.xyz
            = u_xlat2.xyz * u_xlat13.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 =
            (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat5.x = u_xlat26 * u_xlat5.x
            + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x
            = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz
            = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz *
            vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n       
            u_xlat26 = u_xlat13.z * u_xlat26;\n        u_xlat5.xyz = u_xlat0.xyz
            * vec3(u_xlat26);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx
            + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz
            = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat26 = u_xlat2.y * -50.0;\n   
            u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z)
            * vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z);\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_27 = dot(_WorldSpaceLightPos0.xyz,
            (-u_xlat2.xyz));\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27
            = u_xlat16_27 * 0.75 + 0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_27)
            * u_xlat16_4.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n   
            vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n   
            vs_TEXCOORD0 = u_xlat26;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nvarying mediump float vs_TEXCOORD0;\nvarying mediump vec3
            vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nmediump float u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid
            main()\n{\n    u_xlat16_0 = vs_TEXCOORD0;\n    u_xlat16_0 = clamp(u_xlat16_0,
            0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n   
            SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_NONE
          - _SUNDISK_SIMPLE
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform
            \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform
            \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying
            mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat
            u_xlat9;\nvec3 u_xlat14;\nfloat u_xlat18;\nfloat u_xlat23;\nfloat u_xlat27;\nfloat
            u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042,
            0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz
            = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n   
            u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x =
            log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n   
            u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx
            * vec2(0.049999997, 0.0314159282);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) *
            u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n       
            u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x
            = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat27 + u_xlat0.x;\n       
            u_xlat9 = (-u_xlat0.y) * u_xlat27 + 1.0;\n        u_xlat18 = u_xlat9
            * 5.25 + -6.80000019;\n        u_xlat18 = u_xlat9 * u_xlat18 + 3.82999992;\n       
            u_xlat18 = u_xlat9 * u_xlat18 + 0.458999991;\n        u_xlat9 = u_xlat9
            * u_xlat18 + -0.00286999997;\n        u_xlat9 = u_xlat9 * 1.44269502;\n       
            u_xlat0.y = exp2(u_xlat9);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5,
            0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002,
            0.0);\n        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat27
            = sqrt(u_xlat27);\n        u_xlat28 = (-u_xlat27) + 1.0;\n        u_xlat28
            = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29
            = u_xlat29 / u_xlat27;\n        u_xlat31 = dot(u_xlat2.xyz, u_xlat4.xyz);\n       
            u_xlat27 = u_xlat31 / u_xlat27;\n        u_xlat29 = (-u_xlat29) + 1.0;\n       
            u_xlat31 = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat29
            * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat29 * u_xlat31 + 0.458999991;\n       
            u_xlat29 = u_xlat29 * u_xlat31 + -0.00286999997;\n        u_xlat29 =
            u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat27
            = (-u_xlat27) + 1.0;\n        u_xlat31 = u_xlat27 * 5.25 + -6.80000019;\n       
            u_xlat31 = u_xlat27 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat27
            * u_xlat31 + 0.458999991;\n        u_xlat27 = u_xlat27 * u_xlat31 + -0.00286999997;\n       
            u_xlat27 = u_xlat27 * 1.44269502;\n        u_xlat27 = exp2(u_xlat27);\n       
            u_xlat27 = u_xlat27 * 0.25;\n        u_xlat27 = u_xlat29 * 0.25 + (-u_xlat27);\n       
            u_xlat27 = u_xlat28 * u_xlat27 + u_xlat0.y;\n        u_xlat27 = max(u_xlat27,
            0.0);\n        u_xlat27 = min(u_xlat27, 50.0);\n        u_xlat5.xyz =
            u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat6.xyz = (-vec3(u_xlat27)) * u_xlat5.xyz;\n        u_xlat6.xyz =
            u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz
            = exp2(u_xlat6.xyz);\n        u_xlat27 = u_xlat0.z * u_xlat28;\n       
            u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat28 = (-u_xlat0.x) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat0.x;\n        u_xlat4.x
            = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n       
            u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat4.x = u_xlat29 * 5.25 +
            -6.80000019;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 3.82999992;\n       
            u_xlat4.x = u_xlat29 * u_xlat4.x + 0.458999991;\n        u_xlat29 = u_xlat29
            * u_xlat4.x + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x
            * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat29 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat28 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat28;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz
            * vec3(u_xlat27) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz *
            u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat29 = min(u_xlat2.y, -0.00100000005);\n       
            u_xlat29 = -9.99999975e-05 / u_xlat29;\n        u_xlat5.xyz = vec3(u_xlat29)
            * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz),
            u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n       
            u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat23 = u_xlat5.y
            * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 3.82999992;\n       
            u_xlat23 = u_xlat5.y * u_xlat23 + 0.458999991;\n        u_xlat14.x =
            u_xlat5.y * u_xlat23 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x
            * 1.44269502;\n        u_xlat5.y = exp2(u_xlat14.x);\n        u_xlat23
            = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.x * u_xlat23
            + 3.82999992;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 0.458999991;\n       
            u_xlat5.x = u_xlat5.x * u_xlat23 + -0.00286999997;\n        u_xlat5.xyz
            = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x
            = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n       
            u_xlat14.xz = vec2(u_xlat29) * vec2(0.5, 20.0);\n        u_xlat6.xyz
            = u_xlat2.xyz * u_xlat14.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat29 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat29 = sqrt(u_xlat29);\n        u_xlat29 =
            (-u_xlat29) + 1.0;\n        u_xlat29 = u_xlat29 * 230.831207;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat5.x = u_xlat29 * u_xlat5.x
            + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x
            = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz
            = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz *
            vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n       
            u_xlat29 = u_xlat14.z * u_xlat29;\n        u_xlat5.xyz = u_xlat0.xyz
            * vec3(u_xlat29);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx
            + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz
            = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x,
            _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y,
            _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz
            + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n   
            u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_30
            = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * 0.75 +
            0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_4.xyz;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    u_xlat16_30 =
            dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_30 = sqrt(u_xlat16_30);\n   
            u_xlat16_30 = max(u_xlat16_30, 0.25);\n    u_xlat16_30 = min(u_xlat16_30,
            1.0);\n    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(8000.0, 8000.0, 8000.0);\n   
            u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);\n    u_xlat16_8.xyz
            = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz
            * vec3(27.0, 27.0, 27.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz / vec3(u_xlat16_30);\n   
            vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n   
            vs_TEXCOORD3.xyz = sqrt(u_xlat16_8.xyz);\n    vs_TEXCOORD0.xyz = (-u_xlat2.xyz);\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float
            _SunSize;\nvarying mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define
            SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nbool
            u_xlatb2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0.xyz
            = vs_TEXCOORD0.xyz + _WorldSpaceLightPos0.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz,
            u_xlat16_0.xyz);\n    u_xlat16_0.x = sqrt(u_xlat16_0.x);\n    u_xlat16_3.x
            = float(1.0) / _SunSize;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x;\n   
            u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_0.x
            * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x
            = (-u_xlat16_3.x) * u_xlat16_0.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x
            * u_xlat16_0.x;\n    u_xlat16_3.x = vs_TEXCOORD0.y * 50.0;\n    u_xlat16_3.x
            = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz
            + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_1.xyz
            + vs_TEXCOORD2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx
            + u_xlat16_3.xyz;\n    u_xlatb2 = vs_TEXCOORD0.y<0.0;\n    SV_Target0.xyz
            = (bool(u_xlatb2)) ? u_xlat16_1.xyz : u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_HIGH_QUALITY
          - _SUNDISK_SIMPLE
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        definedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _SUNDISK_HIGH_QUALITY
        - _SUNDISK_NONE
        - _SUNDISK_SIMPLE
        keywordGroups:
        - Keywords:
          - _SUNDISK_NONE
          - _SUNDISK_SIMPLE
          - _SUNDISK_HIGH_QUALITY
        KeywordsMinimalCardinality: 1
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: PreviewType
          Value: Skybox
        - Key: QUEUE
          Value: Background
        - Key: RenderType
          Value: Background
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 33
        PlatformMask: -1
      Tags:
      - Key: PreviewType
        Value: Skybox
      - Key: QUEUE
        Value: Background
      - Key: RenderType
        Value: Background
      UsePass: 0
    Shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - _SUNDISK_HIGH_QUALITY
    - _SUNDISK_NONE
    - _SUNDISK_SIMPLE
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    shaderCompilerPlatform: 5
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: Sprites/Default
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _RendererColor;\nuniform
            \tmediump vec2 _Flip;\nuniform \tmediump vec4 _Color;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2
            vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    u_xlat0
            = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nmediump
            vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0
            = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0 = u_xlat10_0
            * vs_COLOR0;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_0.xyz;\n   
            SV_Target0.w = u_xlat16_0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _RendererColor;\nuniform \tmediump vec2 _Flip;\nuniform
            \tmediump vec4 _Color;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5);
            return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2
            a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a;
            }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = u_xlat0.xy / u_xlat0.ww;\n   
            u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat0.xy = u_xlat0.xy
            * u_xlat1.xy;\n    u_xlat0.xy = unity_roundEven(u_xlat0.xy);\n    u_xlat0.xy
            = u_xlat0.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat0.ww * u_xlat0.xy;\n   
            gl_Position.zw = u_xlat0.zw;\n    u_xlat0 = in_COLOR0 * _Color;\n   
            u_xlat0 = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nmediump
            vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0
            = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0 = u_xlat10_0
            * vs_COLOR0;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_0.xyz;\n   
            SV_Target0.w = u_xlat16_0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - PIXELSNAP_ON
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - ETC1_EXTERNAL_ALPHA
        - INSTANCING_ON
        - PIXELSNAP_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _
        - __
        keywordGroups:
        - Keywords:
          - _
          - ETC1_EXTERNAL_ALPHA
        - Keywords:
          - __
          - INSTANCING_ON
        - Keywords:
          - _
          - PIXELSNAP_ON
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: CanUseSpriteAtlas
          Value: true
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: -1
      Tags:
      - Key: CanUseSpriteAtlas
        Value: true
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 10753, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - PIXELSNAP_ON
    - ETC1_EXTERNAL_ALPHA
    - INSTANCING_ON
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    shaderCompilerPlatform: 5
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: UI/Default
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform
            \tfloat _UIMaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 =
            in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy =
            in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy
            = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n   
            vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0,
            2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4
            u_xlat1;\nlowp vec4 u_xlat10_1;\nfloat unity_roundEven(float x) { float
            y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2
            unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x);
            a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4
            unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid
            main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x
            = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n   
            u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1
            + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0
            = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n   
            SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform
            \tfloat _UIMaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 =
            in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy =
            in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy
            = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n   
            vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0,
            2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4
            u_xlat1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nbool u_xlatb3;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x
            = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n   
            u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n   
            u_xlat16_2 = u_xlat16_0.w * u_xlat1.w + -0.00100000005;\n    u_xlatb3
            = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n   
            u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n   
            SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform
            \tfloat _UIMaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 =
            in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy =
            in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy
            = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n   
            vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0,
            2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float
            u_xlat16_1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump float u_xlat16_4;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.xy
            = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_4 =
            vs_COLOR0.w * 255.0;\n    u_xlat16_4 = unity_roundEven(u_xlat16_4);\n   
            u_xlat16_0.w = u_xlat16_4 * 0.00392156886;\n    u_xlat10_2 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat10_2 + _TextureSampleAdd;\n   
            u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat2;\n   
            u_xlat16_1 = u_xlat16_1 * u_xlat0.w;\n    SV_Target0.xyz = u_xlat0.xyz
            * vec3(u_xlat16_1);\n    SV_Target0.w = u_xlat16_1;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform
            \tfloat _UIMaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 =
            in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy =
            in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy
            = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n   
            vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0,
            2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp
            vec4 u_xlat10_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump
            float u_xlat16_5;\nfloat unity_roundEven(float x) { float y = floor(x
            + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2
            a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a;
            }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x
            = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n   
            u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n   
            u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n   
            u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n   
            u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y
            * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n   
            u_xlat16_2 = u_xlat0.w * u_xlat16_2;\n    SV_Target0.xyz = u_xlat0.xyz
            * vec3(u_xlat16_2);\n    SV_Target0.w = u_xlat16_2;\n    u_xlatb1 = u_xlat16_5<0.0;\n   
            if(u_xlatb1){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        definedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - UNITY_UI_ALPHACLIP
        - UNITY_UI_CLIP_RECT
        - _
        keywordGroups:
        - Keywords:
          - _
          - UNITY_UI_CLIP_RECT
        - Keywords:
          - _
          - UNITY_UI_ALPHACLIP
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: CanUseSpriteAtlas
          Value: true
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: -1
      Tags:
      - Key: CanUseSpriteAtlas
        Value: true
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
      UsePass: 0
    Shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    shaderCompilerPlatform: 5
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: Universal Render Pipeline/Lit
        ShaderVariants: []
        definedKeywords: []
        keywordGroups: []
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: LIGHTMODE
          Value: UniversalForward
        - Key: RenderPipeline
          Value: UniversalPipeline
        - Key: RenderType
          Value: Opaque
        - Key: ShaderModel
          Value: 4.5
        - Key: UniversalMaterialType
          Value: Lit
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1101803
        PlatformMask: -33313
      - ShaderName: Universal Render Pipeline/Lit
        ShaderVariants: []
        definedKeywords: []
        keywordGroups: []
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 1
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: RenderPipeline
          Value: UniversalPipeline
        - Key: RenderType
          Value: Opaque
        - Key: ShaderModel
          Value: 4.5
        - Key: UniversalMaterialType
          Value: Lit
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1101803
        PlatformMask: -33313
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: RenderPipeline
        Value: UniversalPipeline
      - Key: RenderType
        Value: Opaque
      - Key: ShaderModel
        Value: 4.5
      - Key: UniversalMaterialType
        Value: Lit
      UsePass: 0
    - Index: 1
      Passes:
      - ShaderName: Universal Render Pipeline/Lit
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump
            float vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nbvec3 u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nvec3 u_xlat5;\nfloat u_xlat18;\nvoid main()\n{\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat18 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat18
            = inversesqrt(u_xlat18);\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD5 = 0.0;\n    u_xlat16_2.x
            = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2.x = u_xlat1.x * u_xlat1.x +
            (-u_xlat16_2.x);\n    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;\n   
            u_xlat16_4.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_4.y = dot(unity_SHBg,
            u_xlat16_3);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_2.xyz
            = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;\n    u_xlat1.w = 1.0;\n   
            u_xlat16_3.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_3.y = dot(unity_SHAg,
            u_xlat1);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;\n    u_xlat16_3.xyz
            = u_xlat16_2.xyz * vec3(12.9232101, 12.9232101, 12.9232101);\n    u_xlat5.xyz
            = log2(abs(u_xlat16_2.xyz));\n    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat5.xyz = exp2(u_xlat5.xyz);\n   
            u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.x =
            (u_xlatb1.x) ? u_xlat16_3.x : u_xlat5.x;\n    u_xlat1.y = (u_xlatb1.y)
            ? u_xlat16_3.y : u_xlat5.y;\n    u_xlat1.z = (u_xlatb1.z) ? u_xlat16_3.z
            : u_xlat5.z;\n    vs_TEXCOORD8.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0,
            0.0));\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2
            _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform
            \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump
            vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nmediump vec2 u_xlat16_0;\nvec3
            u_xlat1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nlowp
            vec4 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3
            u_xlat16_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump
            float u_xlat16_10;\nmediump vec3 u_xlat16_14;\nmediump float u_xlat16_16;\nmediump
            float u_xlat16_18;\nfloat u_xlat25;\nbool u_xlatb25;\nmediump float u_xlat16_26;\nmediump
            float u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0.x = (-_Smoothness)
            + 1.0;\n    u_xlat16_8.x = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;\n   
            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x
            * u_xlat16_0.x;\n    u_xlat16_8.x = u_xlat16_8.x * 6.0;\n    u_xlat1.xyz
            = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat25 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat1.xyz
            = vec3(u_xlat25) * u_xlat1.xyz;\n    u_xlatb25 = unity_OrthoParams.w==0.0;\n   
            u_xlat16_2.x = (u_xlatb25) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n   
            u_xlat16_2.y = (u_xlatb25) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat16_2.z = (u_xlatb25) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n   
            u_xlat1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat1.x =
            inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD2.xyz;\n   
            u_xlat16_16 = dot((-u_xlat16_2.xyz), u_xlat1.xyz);\n    u_xlat16_16 =
            u_xlat16_16 + u_xlat16_16;\n    u_xlat16_3.xyz = u_xlat1.xyz * (-vec3(u_xlat16_16))
            + (-u_xlat16_2.xyz);\n    u_xlat10_3 = textureCube(unity_SpecCube0, u_xlat16_3.xyz,
            u_xlat16_8.x);\n    u_xlat16_8.x = u_xlat10_3.w + -1.0;\n    u_xlat16_0.y
            = unity_SpecCube0_HDR.w * u_xlat16_8.x + 1.0;\n    u_xlat16_0.xy = max(u_xlat16_0.xy,
            vec2(0.0078125, 0.0));\n    u_xlat16_8.x = log2(u_xlat16_0.y);\n    u_xlat16_8.x
            = u_xlat16_8.x * unity_SpecCube0_HDR.y;\n    u_xlat16_8.x = exp2(u_xlat16_8.x);\n   
            u_xlat16_8.x = u_xlat16_8.x * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz
            = u_xlat10_3.xyz * u_xlat16_8.xxx;\n    u_xlat16_26 = dot(u_xlat1.xyz,
            u_xlat16_2.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n   
            u_xlat4.xyz = u_xlat16_2.xyz + _MainLightPosition.xyz;\n    u_xlat16_2.x
            = (-u_xlat16_26) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n   
            u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_10 = (-_Metallic)
            * 0.959999979 + 0.959999979;\n    u_xlat16_18 = (-u_xlat16_10) + _Smoothness;\n   
            u_xlat16_18 = u_xlat16_18 + 1.0;\n    u_xlat16_18 = clamp(u_xlat16_18,
            0.0, 1.0);\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n   
            u_xlat16_5.xyz = u_xlat10_3.xyz * _BaseColor.xyz + vec3(-0.0399999991,
            -0.0399999991, -0.0399999991);\n    u_xlat16_3 = u_xlat10_3.wxyz * _BaseColor.wxyz;\n   
            u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz
            + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_6.xyz
            = vec3(u_xlat16_18) + (-u_xlat16_5.xyz);\n    u_xlat16_2.xzw = u_xlat16_2.xxx
            * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xy = u_xlat16_0.xx
            * u_xlat16_0.xx + vec2(-1.0, 1.0);\n    u_xlat16_29 = float(1.0) / u_xlat16_6.y;\n   
            u_xlat7.xyz = u_xlat16_2.xzw * vec3(u_xlat16_29);\n    u_xlat16_8.xyz
            = u_xlat16_8.xyz * u_xlat7.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_10)
            * u_xlat16_3.yzw;\n    u_xlat16_8.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xyz
            + u_xlat16_8.xyz;\n    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);\n   
            u_xlat25 = max(u_xlat25, 1.17549435e-38);\n    u_xlat25 = inversesqrt(u_xlat25);\n   
            u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;\n    u_xlat25 = dot(_MainLightPosition.xyz,
            u_xlat4.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat4.x
            = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat4.x = clamp(u_xlat4.x, 0.0,
            1.0);\n    u_xlat16_26 = dot(u_xlat1.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_26
            * unity_LightData.z;\n    u_xlat16_14.xyz = vec3(u_xlat16_26) * _MainLightColor.xyz;\n   
            u_xlat1.x = u_xlat4.x * u_xlat4.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_6.x
            + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat16_26
            = u_xlat25 * u_xlat25;\n    u_xlat9 = max(u_xlat16_26, 0.100000001);\n   
            u_xlat1.x = u_xlat9 * u_xlat1.x;\n    u_xlat16_26 = u_xlat16_0.x * 4.0
            + 2.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat1.x
            = u_xlat1.x * u_xlat16_26;\n    u_xlat1.x = u_xlat16_0.x / u_xlat1.x;\n   
            u_xlat16_0.x = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_0.x = max(u_xlat16_0.x,
            0.0);\n    u_xlat16_0.x = min(u_xlat16_0.x, 100.0);\n    u_xlat16_2.xyz
            = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz * u_xlat16_14.xyz + u_xlat16_8.xyz;\n    u_xlatb1 =
            _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? u_xlat16_3.x : 1.0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 1
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: RenderPipeline
            Value: UniversalPipeline
          - Key: RenderType
            Value: Opaque
          - Key: ShaderModel
            Value: 2.0
          - Key: UniversalMaterialType
            Value: Lit
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_WorldTransformParams;\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump
            float vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump
            vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec3 u_xlatb1;\nvec4
            u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nvec3 u_xlat5;\nfloat u_xlat18;\nbool u_xlatb18;\nvoid
            main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat18 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat18
            = inversesqrt(u_xlat18);\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    u_xlat2.xyz = in_TANGENT0.yyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat18 = inversesqrt(u_xlat18);\n   
            u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;\n    u_xlatb18 = unity_WorldTransformParams.w>=0.0;\n   
            u_xlat18 = (u_xlatb18) ? 1.0 : -1.0;\n    u_xlat2.w = u_xlat18 * in_TANGENT0.w;\n   
            vs_TEXCOORD3 = u_xlat2;\n    vs_TEXCOORD5 = 0.0;\n    u_xlat16_3.x =
            u_xlat1.y * u_xlat1.y;\n    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);\n   
            u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr,
            u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_4.z
            = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_3.xyz = unity_SHC.xyz *
            u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_4.x
            = dot(unity_SHAr, u_xlat1);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);\n   
            u_xlat16_4.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            + u_xlat16_4.xyz;\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_4.xyz
            = u_xlat16_3.xyz * vec3(12.9232101, 12.9232101, 12.9232101);\n    u_xlat5.xyz
            = log2(abs(u_xlat16_3.xyz));\n    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat5.xyz = exp2(u_xlat5.xyz);\n   
            u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.x =
            (u_xlatb1.x) ? u_xlat16_4.x : u_xlat5.x;\n    u_xlat1.y = (u_xlatb1.y)
            ? u_xlat16_4.y : u_xlat5.y;\n    u_xlat1.z = (u_xlatb1.z) ? u_xlat16_4.z
            : u_xlat5.z;\n    vs_TEXCOORD8.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0,
            0.0));\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2
            _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform
            \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _BumpMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump
            vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool
            u_xlatb0;\nvec3 u_xlat1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nmediump
            vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3
            u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_12;\nmediump
            float u_xlat16_21;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_30;\nmediump
            float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n   
            u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n   
            u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n   
            u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n   
            u_xlat10_2.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n   
            u_xlat16_3.xy = u_xlat10_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n   
            u_xlat16_30 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_30 = min(u_xlat16_30,
            1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = sqrt(u_xlat16_30);\n   
            u_xlat16_3.z = max(u_xlat16_30, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz,
            u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n   
            u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n   
            u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z
            = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat27 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz
            = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) *
            u_xlat1.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x
            = (u_xlatb27) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y
            = (u_xlatb27) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z
            = (u_xlatb27) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_30
            = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_30 = u_xlat16_30
            + u_xlat16_30;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-vec3(u_xlat16_30))
            + (-u_xlat16_3.xyz);\n    u_xlat16_30 = (-_Smoothness) + 1.0;\n    u_xlat16_31
            = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_30
            * u_xlat16_31;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30
            = max(u_xlat16_30, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n   
            u_xlat10_1 = textureCube(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_31);\n   
            u_xlat16_4.x = u_xlat10_1.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w
            * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);\n   
            u_xlat16_4.x = log2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x *
            unity_SpecCube0_HDR.y;\n    u_xlat16_4.x = exp2(u_xlat16_4.x);\n    u_xlat16_4.x
            = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_4.xyz = u_xlat10_1.xyz
            * u_xlat16_4.xxx;\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n   
            u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_3.xyz
            + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_31) + 1.0;\n   
            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x
            * u_xlat16_3.x;\n    u_xlat16_12 = (-_Metallic) * 0.959999979 + 0.959999979;\n   
            u_xlat16_21 = (-u_xlat16_12) + _Smoothness;\n    u_xlat16_21 = u_xlat16_21
            + 1.0;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n    u_xlat10_2
            = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_5.xyz
            = u_xlat10_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991,
            -0.0399999991);\n    u_xlat16_2 = u_xlat10_2.wxyz * _BaseColor.wxyz;\n   
            u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz
            + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_6.xyz
            = vec3(u_xlat16_21) + (-u_xlat16_5.xyz);\n    u_xlat16_6.xyz = u_xlat16_3.xxx
            * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xz = vec2(u_xlat16_30)
            * vec2(u_xlat16_30) + vec2(-1.0, 1.0);\n    u_xlat16_21 = float(1.0)
            / u_xlat16_3.z;\n    u_xlat7.xyz = u_xlat16_6.xyz * vec3(u_xlat16_21);\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat7.xyz;\n    u_xlat16_6.xyz =
            vec3(u_xlat16_12) * u_xlat16_2.yzw;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz
            * u_xlat16_6.xyz + u_xlat16_4.xyz;\n    u_xlat16_12 = dot(u_xlat0.xyz,
            _MainLightPosition.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n   
            u_xlat16_12 = u_xlat16_12 * unity_LightData.z;\n    u_xlat16_8.xyz =
            vec3(u_xlat16_12) * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27
            = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n   
            u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_12 = u_xlat9 * u_xlat9;\n   
            u_xlat9 = max(u_xlat16_12, 0.100000001);\n    u_xlat0.x = u_xlat0.x *
            u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_3.x + 1.00001001;\n   
            u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n   
            u_xlat16_3.x = u_xlat16_30 * 4.0 + 2.0;\n    u_xlat16_12 = u_xlat16_30
            * u_xlat16_30;\n    u_xlat0.x = u_xlat0.x * u_xlat16_3.x;\n    u_xlat0.x
            = u_xlat16_12 / u_xlat0.x;\n    u_xlat16_3.x = u_xlat0.x + -6.10351563e-05;\n   
            u_xlat16_3.x = max(u_xlat16_3.x, 0.0);\n    u_xlat16_3.x = min(u_xlat16_3.x,
            100.0);\n    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz + u_xlat16_4.xyz;\n   
            u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x
            : 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: RenderPipeline
            Value: UniversalPipeline
          - Key: RenderType
            Value: Opaque
          - Key: ShaderModel
            Value: 2.0
          - Key: UniversalMaterialType
            Value: Lit
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[16];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_LightIndices[2];\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump
            vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nint u_xlati3;\nmediump
            vec3 u_xlat16_4;\nvec3 u_xlat5;\nbvec3 u_xlatb5;\nvec3 u_xlat6;\nvec3
            u_xlat10;\nint u_xlati10;\nbool u_xlatb10;\nfloat u_xlat17;\nmediump
            float u_xlat16_18;\nfloat u_xlat21;\nint u_xlati21;\nmediump float u_xlat16_23;\nfloat
            u_xlat24;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat21 = max(u_xlat21, 1.17549435e-38);\n    u_xlat21
            = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n   
            u_xlat16_2.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n   
            u_xlati21 = int(u_xlat16_2.x);\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y
            = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(int u_xlati_loop_1
            = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n        u_xlatb10
            = u_xlati_loop_1>=u_xlati21;\n        if(u_xlatb10){\n            break;\n       
            }\n        u_xlat16_23 = float(u_xlati_loop_1);\n        u_xlatb10 =
            u_xlat16_23<2.0;\n        u_xlat16_4.xy = (bool(u_xlatb10)) ? unity_LightIndices[0].xy
            : unity_LightIndices[0].zw;\n        u_xlat16_18 = u_xlat16_23 + -2.0;\n       
            u_xlat16_23 = (u_xlatb10) ? u_xlat16_23 : u_xlat16_18;\n        u_xlatb10
            = u_xlat16_23<1.0;\n        u_xlat16_23 = (u_xlatb10) ? u_xlat16_4.x
            : u_xlat16_4.y;\n        u_xlati10 = int(u_xlat16_23);\n        u_xlat5.xyz
            = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati10].www + _AdditionalLightsPosition[u_xlati10].xyz;\n       
            u_xlat17 = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat17 = max(u_xlat17,
            6.10351563e-05);\n        u_xlat24 = inversesqrt(u_xlat17);\n       
            u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;\n        u_xlat24 = float(1.0)
            / u_xlat17;\n        u_xlat17 = u_xlat17 * _AdditionalLightsAttenuation[u_xlati10].x
            + _AdditionalLightsAttenuation[u_xlati10].y;\n        u_xlat17 = clamp(u_xlat17,
            0.0, 1.0);\n        u_xlat17 = u_xlat17 * u_xlat24;\n        u_xlat16_23
            = dot(_AdditionalLightsSpotDir[u_xlati10].xyz, u_xlat5.xyz);\n       
            u_xlat16_23 = u_xlat16_23 * _AdditionalLightsAttenuation[u_xlati10].z
            + _AdditionalLightsAttenuation[u_xlati10].w;\n        u_xlat16_23 = clamp(u_xlat16_23,
            0.0, 1.0);\n        u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n       
            u_xlat17 = u_xlat16_23 * u_xlat17;\n        u_xlat10.xyz = vec3(u_xlat17)
            * _AdditionalLightsColor[u_xlati10].xyz;\n        u_xlat16_23 = dot(u_xlat1.xyz,
            u_xlat5.xyz);\n        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n       
            u_xlat16_2.xyz = u_xlat10.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;\n   
            }\n    vs_TEXCOORD5.yzw = u_xlat16_2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat1.w = 1.0;\n    u_xlat16_2.x
            = dot(unity_SHAr, u_xlat1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);\n   
            u_xlat16_2.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3 = u_xlat1.yzzx
            * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_3);\n   
            u_xlat16_4.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_4.z = dot(unity_SHBb,
            u_xlat16_3);\n    u_xlat16_23 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_23
            = u_xlat1.x * u_xlat1.x + (-u_xlat16_23);\n    u_xlat16_4.xyz = unity_SHC.xyz
            * vec3(u_xlat16_23) + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            + u_xlat16_4.xyz;\n    u_xlatb5.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;\n    u_xlat16_4.xyz
            = u_xlat16_2.xyz * vec3(12.9232101, 12.9232101, 12.9232101);\n    u_xlat6.xyz
            = log2(abs(u_xlat16_2.xyz));\n    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat6.xyz = exp2(u_xlat6.xyz);\n   
            u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat5.x =
            (u_xlatb5.x) ? u_xlat16_4.x : u_xlat6.x;\n    u_xlat5.y = (u_xlatb5.y)
            ? u_xlat16_4.y : u_xlat6.y;\n    u_xlat5.z = (u_xlatb5.z) ? u_xlat16_4.z
            : u_xlat6.z;\n    vs_TEXCOORD8.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0,
            0.0));\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD5.x = 0.0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2
            _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform
            \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump
            vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0
            gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump
            vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nvec3
            u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump
            vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_10;\nmediump
            vec3 u_xlat16_14;\nmediump float u_xlat16_16;\nmediump float u_xlat16_18;\nfloat
            u_xlat25;\nbool u_xlatb25;\nmediump float u_xlat16_26;\nmediump float
            u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0.x = (-_Smoothness) + 1.0;\n   
            u_xlat16_8.x = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_8.x
            = u_xlat16_8.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n   
            u_xlat16_8.x = u_xlat16_8.x * 6.0;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat1.xyz = vec3(u_xlat25) *
            u_xlat1.xyz;\n    u_xlatb25 = unity_OrthoParams.w==0.0;\n    u_xlat16_2.x
            = (u_xlatb25) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_2.y
            = (u_xlatb25) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_2.z
            = (u_xlatb25) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat1.x
            = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n   
            u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_16 = dot((-u_xlat16_2.xyz),
            u_xlat1.xyz);\n    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;\n    u_xlat16_3.xyz
            = u_xlat1.xyz * (-vec3(u_xlat16_16)) + (-u_xlat16_2.xyz);\n    u_xlat10_3
            = textureCube(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_8.x);\n    u_xlat16_8.x
            = u_xlat10_3.w + -1.0;\n    u_xlat16_0.y = unity_SpecCube0_HDR.w * u_xlat16_8.x
            + 1.0;\n    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0078125, 0.0));\n   
            u_xlat16_8.x = log2(u_xlat16_0.y);\n    u_xlat16_8.x = u_xlat16_8.x *
            unity_SpecCube0_HDR.y;\n    u_xlat16_8.x = exp2(u_xlat16_8.x);\n    u_xlat16_8.x
            = u_xlat16_8.x * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_3.xyz
            * u_xlat16_8.xxx;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat16_2.xyz);\n   
            u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_2.xyz
            + _MainLightPosition.xyz;\n    u_xlat16_2.x = (-u_xlat16_26) + 1.0;\n   
            u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_10 = (-_Metallic) * 0.959999979 + 0.959999979;\n   
            u_xlat16_18 = (-u_xlat16_10) + _Smoothness;\n    u_xlat16_18 = u_xlat16_18
            + 1.0;\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat10_3
            = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_5.xyz
            = u_xlat10_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991,
            -0.0399999991);\n    u_xlat16_3 = u_xlat10_3.wxyz * _BaseColor.wxyz;\n   
            u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz
            + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_6.xyz
            = vec3(u_xlat16_18) + (-u_xlat16_5.xyz);\n    u_xlat16_2.xzw = u_xlat16_2.xxx
            * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xy = u_xlat16_0.xx
            * u_xlat16_0.xx + vec2(-1.0, 1.0);\n    u_xlat16_29 = float(1.0) / u_xlat16_6.y;\n   
            u_xlat7.xyz = u_xlat16_2.xzw * vec3(u_xlat16_29);\n    u_xlat16_8.xyz
            = u_xlat16_8.xyz * u_xlat7.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_10)
            * u_xlat16_3.yzw;\n    u_xlat16_8.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xyz
            + u_xlat16_8.xyz;\n    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);\n   
            u_xlat25 = max(u_xlat25, 1.17549435e-38);\n    u_xlat25 = inversesqrt(u_xlat25);\n   
            u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;\n    u_xlat25 = dot(_MainLightPosition.xyz,
            u_xlat4.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat4.x
            = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat4.x = clamp(u_xlat4.x, 0.0,
            1.0);\n    u_xlat16_26 = dot(u_xlat1.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_26
            * unity_LightData.z;\n    u_xlat16_14.xyz = vec3(u_xlat16_26) * _MainLightColor.xyz;\n   
            u_xlat1.x = u_xlat4.x * u_xlat4.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_6.x
            + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat16_26
            = u_xlat25 * u_xlat25;\n    u_xlat9 = max(u_xlat16_26, 0.100000001);\n   
            u_xlat1.x = u_xlat9 * u_xlat1.x;\n    u_xlat16_26 = u_xlat16_0.x * 4.0
            + 2.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat1.x
            = u_xlat1.x * u_xlat16_26;\n    u_xlat1.x = u_xlat16_0.x / u_xlat1.x;\n   
            u_xlat16_0.x = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_0.x = max(u_xlat16_0.x,
            0.0);\n    u_xlat16_0.x = min(u_xlat16_0.x, 100.0);\n    u_xlat16_5.xyz
            = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.xyz
            = u_xlat16_5.xyz * u_xlat16_14.xyz + u_xlat16_8.xyz;\n    SV_Target0.xyz
            = vs_TEXCOORD5.yzw * u_xlat16_2.xyz + u_xlat16_0.xyz;\n    u_xlatb1 =
            _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? u_xlat16_3.x : 1.0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 6
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - _ADDITIONAL_LIGHTS_VERTEX
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: RenderPipeline
            Value: UniversalPipeline
          - Key: RenderType
            Value: Opaque
          - Key: ShaderModel
            Value: 2.0
          - Key: UniversalMaterialType
            Value: Lit
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[16];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_WorldTransformParams;\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3
            vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4
            vs_TEXCOORD3;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying mediump vec3
            vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec4 u_xlat16_4;\nint u_xlati4;\nmediump vec3 u_xlat16_5;\nvec3
            u_xlat6;\nbvec3 u_xlatb6;\nvec3 u_xlat7;\nvec3 u_xlat12;\nint u_xlati12;\nbool
            u_xlatb12;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nint
            u_xlati24;\nbool u_xlatb24;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat24 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat24 = max(u_xlat24, 1.17549435e-38);\n    u_xlat24
            = inversesqrt(u_xlat24);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n   
            u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat24 = max(u_xlat24, 1.17549435e-38);\n    u_xlat24 = inversesqrt(u_xlat24);\n   
            u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat16_3.x = min(_AdditionalLightsCount.x,
            unity_LightData.y);\n    u_xlati24 = int(u_xlat16_3.x);\n    u_xlat16_3.x
            = float(0.0);\n    u_xlat16_3.y = float(0.0);\n    u_xlat16_3.z = float(0.0);\n   
            for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n   
            {\n        u_xlatb12 = u_xlati_loop_1>=u_xlati24;\n        if(u_xlatb12){\n           
            break;\n        }\n        u_xlat16_27 = float(u_xlati_loop_1);\n       
            u_xlatb12 = u_xlat16_27<2.0;\n        u_xlat16_5.xy = (bool(u_xlatb12))
            ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n        u_xlat16_21
            = u_xlat16_27 + -2.0;\n        u_xlat16_27 = (u_xlatb12) ? u_xlat16_27
            : u_xlat16_21;\n        u_xlatb12 = u_xlat16_27<1.0;\n        u_xlat16_27
            = (u_xlatb12) ? u_xlat16_5.x : u_xlat16_5.y;\n        u_xlati12 = int(u_xlat16_27);\n       
            u_xlat6.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati12].www
            + _AdditionalLightsPosition[u_xlati12].xyz;\n        u_xlat20 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat20 = max(u_xlat20, 6.10351563e-05);\n       
            u_xlat28 = inversesqrt(u_xlat20);\n        u_xlat6.xyz = vec3(u_xlat28)
            * u_xlat6.xyz;\n        u_xlat28 = float(1.0) / u_xlat20;\n        u_xlat20
            = u_xlat20 * _AdditionalLightsAttenuation[u_xlati12].x + _AdditionalLightsAttenuation[u_xlati12].y;\n       
            u_xlat20 = clamp(u_xlat20, 0.0, 1.0);\n        u_xlat20 = u_xlat20 *
            u_xlat28;\n        u_xlat16_27 = dot(_AdditionalLightsSpotDir[u_xlati12].xyz,
            u_xlat6.xyz);\n        u_xlat16_27 = u_xlat16_27 * _AdditionalLightsAttenuation[u_xlati12].z
            + _AdditionalLightsAttenuation[u_xlati12].w;\n        u_xlat16_27 = clamp(u_xlat16_27,
            0.0, 1.0);\n        u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n       
            u_xlat20 = u_xlat16_27 * u_xlat20;\n        u_xlat12.xyz = vec3(u_xlat20)
            * _AdditionalLightsColor[u_xlati12].xyz;\n        u_xlat16_27 = dot(u_xlat1.xyz,
            u_xlat6.xyz);\n        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n       
            u_xlat16_3.xyz = u_xlat12.xyz * vec3(u_xlat16_27) + u_xlat16_3.xyz;\n   
            }\n    vs_TEXCOORD5.yzw = u_xlat16_3.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlatb24 = unity_WorldTransformParams.w>=0.0;\n   
            u_xlat24 = (u_xlatb24) ? 1.0 : -1.0;\n    u_xlat2.w = u_xlat24 * in_TANGENT0.w;\n   
            u_xlat1.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_3.y
            = dot(unity_SHAg, u_xlat1);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);\n   
            u_xlat16_4 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_5.x = dot(unity_SHBr,
            u_xlat16_4);\n    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);\n    u_xlat16_5.z
            = dot(unity_SHBb, u_xlat16_4);\n    u_xlat16_27 = u_xlat1.y * u_xlat1.y;\n   
            u_xlat16_27 = u_xlat1.x * u_xlat1.x + (-u_xlat16_27);\n    u_xlat16_5.xyz
            = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlatb6.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_5.xyz
            = u_xlat16_3.xyz * vec3(12.9232101, 12.9232101, 12.9232101);\n    u_xlat7.xyz
            = log2(abs(u_xlat16_3.xyz));\n    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat7.xyz = exp2(u_xlat7.xyz);\n   
            u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat6.x =
            (u_xlatb6.x) ? u_xlat16_5.x : u_xlat7.x;\n    u_xlat6.y = (u_xlatb6.y)
            ? u_xlat16_5.y : u_xlat7.y;\n    u_xlat6.z = (u_xlatb6.z) ? u_xlat16_5.z
            : u_xlat7.z;\n    vs_TEXCOORD8.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0,
            0.0));\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD3 = u_xlat2;\n    vs_TEXCOORD5.x = 0.0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2
            _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform
            \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _BumpMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump
            vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec4
            u_xlat10_1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump
            float u_xlat16_13;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nbool
            u_xlatb27;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nmediump
            float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n   
            u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n   
            u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n   
            u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n   
            u_xlat10_2.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n   
            u_xlat16_3.xy = u_xlat10_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n   
            u_xlat16_30 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_30 = min(u_xlat16_30,
            1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = sqrt(u_xlat16_30);\n   
            u_xlat16_3.z = max(u_xlat16_30, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz,
            u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n   
            u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n   
            u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z
            = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat27 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz
            = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat16_3.x = dot(u_xlat0.xyz,
            _MainLightPosition.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0,
            1.0);\n    u_xlat16_3.x = u_xlat16_3.x * unity_LightData.z;\n    u_xlat16_3.xyz
            = u_xlat16_3.xxx * _MainLightColor.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) *
            u_xlat1.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x
            = (u_xlatb27) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y
            = (u_xlatb27) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z
            = (u_xlatb27) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_30
            = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_30 = u_xlat16_30
            + u_xlat16_30;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_30))
            + (-u_xlat16_4.xyz);\n    u_xlat16_30 = (-_Smoothness) + 1.0;\n    u_xlat16_31
            = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_30
            * u_xlat16_31;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30
            = max(u_xlat16_30, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n   
            u_xlat10_1 = textureCube(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n   
            u_xlat16_31 = u_xlat10_1.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w
            * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31
            = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n   
            u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n   
            u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(u_xlat16_31);\n    u_xlat16_31
            = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31,
            0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n   
            u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x
            * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n   
            u_xlat16_13 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22
            = (-u_xlat16_13) + _Smoothness;\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n   
            u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat10_2 = texture2D(_BaseMap,
            vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat10_2.xyz
            * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n   
            u_xlat16_2 = u_xlat10_2.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz =
            vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991,
            0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_22)
            + (-u_xlat16_6.xyz);\n    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_7.xyz
            + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_30) * vec2(u_xlat16_30)
            + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n   
            u_xlat8.xyz = u_xlat16_4.xzw * vec3(u_xlat16_32);\n    u_xlat16_4.xzw
            = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_13)
            * u_xlat16_2.yzw;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz
            + u_xlat16_4.xzw;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n   
            u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9
            = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat9 = clamp(u_xlat9,
            0.0, 1.0);\n    u_xlat16_31 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_31,
            0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x
            = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x *
            u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_30
            * 4.0 + 2.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat0.x
            = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_30 / u_xlat0.x;\n   
            u_xlat16_30 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_30 = max(u_xlat16_30,
            0.0);\n    u_xlat16_30 = min(u_xlat16_30, 100.0);\n    u_xlat16_6.xyz
            = u_xlat16_6.xyz * vec3(u_xlat16_30) + u_xlat16_5.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;\n    SV_Target0.xyz
            = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    u_xlatb0 =
            _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x : 1.0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 7
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - _ADDITIONAL_LIGHTS_VERTEX
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: RenderPipeline
            Value: UniversalPipeline
          - Key: RenderType
            Value: Opaque
          - Key: ShaderModel
            Value: 2.0
          - Key: UniversalMaterialType
            Value: Lit
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump
            float vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nbvec3 u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nvec3 u_xlat5;\nfloat u_xlat18;\nvoid main()\n{\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat18 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat18
            = inversesqrt(u_xlat18);\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD5 = 0.0;\n    u_xlat16_2.x
            = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2.x = u_xlat1.x * u_xlat1.x +
            (-u_xlat16_2.x);\n    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;\n   
            u_xlat16_4.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_4.y = dot(unity_SHBg,
            u_xlat16_3);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_2.xyz
            = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;\n    u_xlat1.w = 1.0;\n   
            u_xlat16_3.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_3.y = dot(unity_SHAg,
            u_xlat1);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;\n    u_xlat16_3.xyz
            = u_xlat16_2.xyz * vec3(12.9232101, 12.9232101, 12.9232101);\n    u_xlat5.xyz
            = log2(abs(u_xlat16_2.xyz));\n    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat5.xyz = exp2(u_xlat5.xyz);\n   
            u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.x =
            (u_xlatb1.x) ? u_xlat16_3.x : u_xlat5.x;\n    u_xlat1.y = (u_xlatb1.y)
            ? u_xlat16_3.y : u_xlat5.y;\n    u_xlat1.z = (u_xlatb1.z) ? u_xlat16_3.z
            : u_xlat5.z;\n    vs_TEXCOORD8.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0,
            0.0));\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2
            _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform
            \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump
            vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nmediump vec2 u_xlat16_0;\nvec3
            u_xlat1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nlowp
            vec4 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3
            u_xlat16_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump
            float u_xlat16_10;\nmediump vec3 u_xlat16_14;\nmediump float u_xlat16_16;\nmediump
            float u_xlat16_18;\nfloat u_xlat25;\nbool u_xlatb25;\nmediump float u_xlat16_26;\nmediump
            float u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0.x = (-_Smoothness)
            + 1.0;\n    u_xlat16_8.x = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;\n   
            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x
            * u_xlat16_0.x;\n    u_xlat16_8.x = u_xlat16_8.x * 6.0;\n    u_xlat1.xyz
            = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat25 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat1.xyz
            = vec3(u_xlat25) * u_xlat1.xyz;\n    u_xlatb25 = unity_OrthoParams.w==0.0;\n   
            u_xlat16_2.x = (u_xlatb25) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n   
            u_xlat16_2.y = (u_xlatb25) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n   
            u_xlat16_2.z = (u_xlatb25) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n   
            u_xlat1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat1.x =
            inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD2.xyz;\n   
            u_xlat16_16 = dot((-u_xlat16_2.xyz), u_xlat1.xyz);\n    u_xlat16_16 =
            u_xlat16_16 + u_xlat16_16;\n    u_xlat16_3.xyz = u_xlat1.xyz * (-vec3(u_xlat16_16))
            + (-u_xlat16_2.xyz);\n    u_xlat10_3 = textureCube(unity_SpecCube0, u_xlat16_3.xyz,
            u_xlat16_8.x);\n    u_xlat16_8.x = u_xlat10_3.w + -1.0;\n    u_xlat16_0.y
            = unity_SpecCube0_HDR.w * u_xlat16_8.x + 1.0;\n    u_xlat16_0.xy = max(u_xlat16_0.xy,
            vec2(0.0078125, 0.0));\n    u_xlat16_8.x = log2(u_xlat16_0.y);\n    u_xlat16_8.x
            = u_xlat16_8.x * unity_SpecCube0_HDR.y;\n    u_xlat16_8.x = exp2(u_xlat16_8.x);\n   
            u_xlat16_8.x = u_xlat16_8.x * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz
            = u_xlat10_3.xyz * u_xlat16_8.xxx;\n    u_xlat16_26 = dot(u_xlat1.xyz,
            u_xlat16_2.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n   
            u_xlat4.xyz = u_xlat16_2.xyz + _MainLightPosition.xyz;\n    u_xlat16_2.x
            = (-u_xlat16_26) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n   
            u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_10 = (-_Metallic)
            * 0.959999979 + 0.959999979;\n    u_xlat16_18 = (-u_xlat16_10) + _Smoothness;\n   
            u_xlat16_18 = u_xlat16_18 + 1.0;\n    u_xlat16_18 = clamp(u_xlat16_18,
            0.0, 1.0);\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n   
            u_xlat16_5.xyz = u_xlat10_3.xyz * _BaseColor.xyz + vec3(-0.0399999991,
            -0.0399999991, -0.0399999991);\n    u_xlat16_3 = u_xlat10_3.wxyz * _BaseColor.wxyz;\n   
            u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz
            + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_6.xyz
            = vec3(u_xlat16_18) + (-u_xlat16_5.xyz);\n    u_xlat16_2.xzw = u_xlat16_2.xxx
            * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xy = u_xlat16_0.xx
            * u_xlat16_0.xx + vec2(-1.0, 1.0);\n    u_xlat16_29 = float(1.0) / u_xlat16_6.y;\n   
            u_xlat7.xyz = u_xlat16_2.xzw * vec3(u_xlat16_29);\n    u_xlat16_8.xyz
            = u_xlat16_8.xyz * u_xlat7.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_10)
            * u_xlat16_3.yzw;\n    u_xlat16_8.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xyz
            + u_xlat16_8.xyz;\n    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);\n   
            u_xlat25 = max(u_xlat25, 1.17549435e-38);\n    u_xlat25 = inversesqrt(u_xlat25);\n   
            u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;\n    u_xlat25 = dot(_MainLightPosition.xyz,
            u_xlat4.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat4.x
            = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat4.x = clamp(u_xlat4.x, 0.0,
            1.0);\n    u_xlat16_26 = dot(u_xlat1.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_26
            * unity_LightData.z;\n    u_xlat16_14.xyz = vec3(u_xlat16_26) * _MainLightColor.xyz;\n   
            u_xlat1.x = u_xlat4.x * u_xlat4.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_6.x
            + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat16_26
            = u_xlat25 * u_xlat25;\n    u_xlat9 = max(u_xlat16_26, 0.100000001);\n   
            u_xlat1.x = u_xlat9 * u_xlat1.x;\n    u_xlat16_26 = u_xlat16_0.x * 4.0
            + 2.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat1.x
            = u_xlat1.x * u_xlat16_26;\n    u_xlat1.x = u_xlat16_0.x / u_xlat1.x;\n   
            u_xlat16_0.x = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_0.x = max(u_xlat16_0.x,
            0.0);\n    u_xlat16_0.x = min(u_xlat16_0.x, 100.0);\n    u_xlat16_2.xyz
            = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz * u_xlat16_14.xyz + u_xlat16_8.xyz;\n    u_xlatb1 =
            _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? u_xlat16_3.x : 1.0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - _RECEIVE_SHADOWS_OFF
          - _SURFACE_TYPE_TRANSPARENT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: RenderPipeline
            Value: UniversalPipeline
          - Key: RenderType
            Value: Opaque
          - Key: ShaderModel
            Value: 2.0
          - Key: UniversalMaterialType
            Value: Lit
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_WorldTransformParams;\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump
            float vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump
            vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec3 u_xlatb1;\nvec4
            u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nvec3 u_xlat5;\nfloat u_xlat18;\nbool u_xlatb18;\nvoid
            main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat18 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat18
            = inversesqrt(u_xlat18);\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    u_xlat2.xyz = in_TANGENT0.yyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat18 = inversesqrt(u_xlat18);\n   
            u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;\n    u_xlatb18 = unity_WorldTransformParams.w>=0.0;\n   
            u_xlat18 = (u_xlatb18) ? 1.0 : -1.0;\n    u_xlat2.w = u_xlat18 * in_TANGENT0.w;\n   
            vs_TEXCOORD3 = u_xlat2;\n    vs_TEXCOORD5 = 0.0;\n    u_xlat16_3.x =
            u_xlat1.y * u_xlat1.y;\n    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);\n   
            u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr,
            u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_4.z
            = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_3.xyz = unity_SHC.xyz *
            u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_4.x
            = dot(unity_SHAr, u_xlat1);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);\n   
            u_xlat16_4.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            + u_xlat16_4.xyz;\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_4.xyz
            = u_xlat16_3.xyz * vec3(12.9232101, 12.9232101, 12.9232101);\n    u_xlat5.xyz
            = log2(abs(u_xlat16_3.xyz));\n    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat5.xyz = exp2(u_xlat5.xyz);\n   
            u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.x =
            (u_xlatb1.x) ? u_xlat16_4.x : u_xlat5.x;\n    u_xlat1.y = (u_xlatb1.y)
            ? u_xlat16_4.y : u_xlat5.y;\n    u_xlat1.z = (u_xlatb1.z) ? u_xlat16_4.z
            : u_xlat5.z;\n    vs_TEXCOORD8.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0,
            0.0));\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2
            _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SpecColor;\nuniform \tmediump float _Smoothness;\nuniform
            \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _BumpMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump
            vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool
            u_xlatb0;\nvec3 u_xlat1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nmediump
            vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nmediump float
            u_xlat16_9;\nmediump vec3 u_xlat16_11;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump
            float u_xlat16_21;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.x
            = vs_TEXCOORD3.x;\n    u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz =
            vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat1.xyz = vs_TEXCOORD2.yzx
            * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xzy *
            vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n    u_xlat10_2.xy = texture2D(_BumpMap,
            vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat10_2.yx
            * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_21 = dot(u_xlat16_3.xy,
            u_xlat16_3.xy);\n    u_xlat16_21 = min(u_xlat16_21, 1.0);\n    u_xlat16_21
            = (-u_xlat16_21) + 1.0;\n    u_xlat16_21 = sqrt(u_xlat16_21);\n    u_xlat16_3.z
            = max(u_xlat16_21, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz,
            u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n   
            u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n   
            u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z
            = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat18 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat0.xyz
            = vec3(u_xlat18) * u_xlat0.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.xyz = vec3(u_xlat18) *
            u_xlat1.xyz;\n    u_xlatb18 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x
            = (u_xlatb18) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y
            = (u_xlatb18) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z
            = (u_xlatb18) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_21
            = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_21 = u_xlat16_21
            + u_xlat16_21;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-vec3(u_xlat16_21))
            + (-u_xlat16_3.xyz);\n    u_xlat16_21 = (-_Smoothness) + 1.0;\n    u_xlat16_22
            = (-u_xlat16_21) * 0.699999988 + 1.70000005;\n    u_xlat16_22 = u_xlat16_21
            * u_xlat16_22;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_21
            = max(u_xlat16_21, 0.0078125);\n    u_xlat16_22 = u_xlat16_22 * 6.0;\n   
            u_xlat10_1 = textureCube(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_22);\n   
            u_xlat16_4.x = u_xlat10_1.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w
            * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);\n   
            u_xlat16_4.x = log2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x *
            unity_SpecCube0_HDR.y;\n    u_xlat16_4.x = exp2(u_xlat16_4.x);\n    u_xlat16_4.x
            = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_4.xyz = u_xlat10_1.xyz
            * u_xlat16_4.xxx;\n    u_xlat16_22 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n   
            u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_3.xyz
            + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_22) + 1.0;\n   
            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x
            * u_xlat16_3.x;\n    u_xlat16_9 = _SpecColor.x + _Smoothness;\n    u_xlat16_9
            = clamp(u_xlat16_9, 0.0, 1.0);\n    u_xlat16_5.xyz = vec3(u_xlat16_9)
            + (-_SpecColor.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_5.xyz
            + _SpecColor.xyz;\n    u_xlat16_5.xy = vec2(u_xlat16_21) * vec2(u_xlat16_21)
            + vec2(-1.0, 1.0);\n    u_xlat16_22 = float(1.0) / u_xlat16_5.y;\n   
            u_xlat2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_22);\n    u_xlat16_3.xyz
            = u_xlat2.xyz * u_xlat16_4.xyz;\n    u_xlat16_4.x = (-_SpecColor.x) +
            1.0;\n    u_xlat10_2 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n   
            u_xlat16_2 = u_xlat10_2.wxyz * _BaseColor.wxyz;\n    u_xlat16_4.xyz =
            u_xlat16_4.xxx * u_xlat16_2.yzw;\n    u_xlat16_3.xyz = vs_TEXCOORD8.xyz
            * u_xlat16_4.xyz + u_xlat16_3.xyz;\n    u_xlat16_22 = dot(u_xlat0.xyz,
            _MainLightPosition.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n   
            u_xlat16_22 = u_xlat16_22 * unity_LightData.z;\n    u_xlat16_11.xyz =
            vec3(u_xlat16_22) * _MainLightColor.xyz;\n    u_xlat18 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat18
            = inversesqrt(u_xlat18);\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat6 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n   
            u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat16_22 = u_xlat6 * u_xlat6;\n   
            u_xlat6 = max(u_xlat16_22, 0.100000001);\n    u_xlat0.x = u_xlat0.x *
            u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_5.x + 1.00001001;\n   
            u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat6 * u_xlat0.x;\n   
            u_xlat16_22 = u_xlat16_21 * 4.0 + 2.0;\n    u_xlat16_21 = u_xlat16_21
            * u_xlat16_21;\n    u_xlat0.x = u_xlat0.x * u_xlat16_22;\n    u_xlat0.x
            = u_xlat16_21 / u_xlat0.x;\n    u_xlat16_21 = u_xlat0.x + -6.10351563e-05;\n   
            u_xlat16_21 = max(u_xlat16_21, 0.0);\n    u_xlat16_21 = min(u_xlat16_21,
            100.0);\n    u_xlat16_4.xyz = _SpecColor.xyz * vec3(u_xlat16_21) + u_xlat16_4.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_11.xyz + u_xlat16_3.xyz;\n   
            u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x
            : 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - _NORMALMAP
          - _SPECULAR_SETUP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: RenderPipeline
            Value: UniversalPipeline
          - Key: RenderType
            Value: Opaque
          - Key: ShaderModel
            Value: 2.0
          - Key: UniversalMaterialType
            Value: Lit
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_WorldTransformParams;\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump
            float vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump
            vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec3 u_xlatb1;\nvec4
            u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nvec3 u_xlat5;\nfloat u_xlat18;\nbool u_xlatb18;\nvoid
            main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat18 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat18
            = inversesqrt(u_xlat18);\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    u_xlat2.xyz = in_TANGENT0.yyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat18 = inversesqrt(u_xlat18);\n   
            u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;\n    u_xlatb18 = unity_WorldTransformParams.w>=0.0;\n   
            u_xlat18 = (u_xlatb18) ? 1.0 : -1.0;\n    u_xlat2.w = u_xlat18 * in_TANGENT0.w;\n   
            vs_TEXCOORD3 = u_xlat2;\n    vs_TEXCOORD5 = 0.0;\n    u_xlat16_3.x =
            u_xlat1.y * u_xlat1.y;\n    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);\n   
            u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr,
            u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_4.z
            = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_3.xyz = unity_SHC.xyz *
            u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_4.x
            = dot(unity_SHAr, u_xlat1);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);\n   
            u_xlat16_4.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            + u_xlat16_4.xyz;\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_4.xyz
            = u_xlat16_3.xyz * vec3(12.9232101, 12.9232101, 12.9232101);\n    u_xlat5.xyz
            = log2(abs(u_xlat16_3.xyz));\n    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat5.xyz = exp2(u_xlat5.xyz);\n   
            u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.x =
            (u_xlatb1.x) ? u_xlat16_4.x : u_xlat5.x;\n    u_xlat1.y = (u_xlatb1.y)
            ? u_xlat16_4.y : u_xlat5.y;\n    u_xlat1.z = (u_xlatb1.z) ? u_xlat16_4.z
            : u_xlat5.z;\n    vs_TEXCOORD8.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0,
            0.0));\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2
            _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform
            \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _BumpMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump
            vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool
            u_xlatb0;\nvec3 u_xlat1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nmediump
            vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3
            u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_12;\nmediump
            float u_xlat16_21;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_30;\nmediump
            float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n   
            u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n   
            u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n   
            u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n   
            u_xlat10_2.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n   
            u_xlat16_3.xy = u_xlat10_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n   
            u_xlat16_30 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_30 = min(u_xlat16_30,
            1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = sqrt(u_xlat16_30);\n   
            u_xlat16_3.z = max(u_xlat16_30, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz,
            u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n   
            u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n   
            u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z
            = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat27 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz
            = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) *
            u_xlat1.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x
            = (u_xlatb27) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y
            = (u_xlatb27) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z
            = (u_xlatb27) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_30
            = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_30 = u_xlat16_30
            + u_xlat16_30;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-vec3(u_xlat16_30))
            + (-u_xlat16_3.xyz);\n    u_xlat16_30 = (-_Smoothness) + 1.0;\n    u_xlat16_31
            = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_30
            * u_xlat16_31;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30
            = max(u_xlat16_30, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n   
            u_xlat10_1 = textureCube(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_31);\n   
            u_xlat16_4.x = u_xlat10_1.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w
            * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);\n   
            u_xlat16_4.x = log2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x *
            unity_SpecCube0_HDR.y;\n    u_xlat16_4.x = exp2(u_xlat16_4.x);\n    u_xlat16_4.x
            = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_4.xyz = u_xlat10_1.xyz
            * u_xlat16_4.xxx;\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n   
            u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_3.xyz
            + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_31) + 1.0;\n   
            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x
            * u_xlat16_3.x;\n    u_xlat16_12 = (-_Metallic) * 0.959999979 + 0.959999979;\n   
            u_xlat16_21 = (-u_xlat16_12) + _Smoothness;\n    u_xlat16_21 = u_xlat16_21
            + 1.0;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n    u_xlat10_2
            = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_5.xyz
            = u_xlat10_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991,
            -0.0399999991);\n    u_xlat16_2 = u_xlat10_2.wxyz * _BaseColor.wxyz;\n   
            u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz
            + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_6.xyz
            = vec3(u_xlat16_21) + (-u_xlat16_5.xyz);\n    u_xlat16_6.xyz = u_xlat16_3.xxx
            * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xz = vec2(u_xlat16_30)
            * vec2(u_xlat16_30) + vec2(-1.0, 1.0);\n    u_xlat16_21 = float(1.0)
            / u_xlat16_3.z;\n    u_xlat7.xyz = u_xlat16_6.xyz * vec3(u_xlat16_21);\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat7.xyz;\n    u_xlat16_6.xyz =
            vec3(u_xlat16_12) * u_xlat16_2.yzw;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz
            * u_xlat16_6.xyz + u_xlat16_4.xyz;\n    u_xlat16_12 = dot(u_xlat0.xyz,
            _MainLightPosition.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n   
            u_xlat16_12 = u_xlat16_12 * unity_LightData.z;\n    u_xlat16_8.xyz =
            vec3(u_xlat16_12) * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27
            = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x,
            0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n   
            u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_12 = u_xlat9 * u_xlat9;\n   
            u_xlat9 = max(u_xlat16_12, 0.100000001);\n    u_xlat0.x = u_xlat0.x *
            u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_3.x + 1.00001001;\n   
            u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n   
            u_xlat16_3.x = u_xlat16_30 * 4.0 + 2.0;\n    u_xlat16_12 = u_xlat16_30
            * u_xlat16_30;\n    u_xlat0.x = u_xlat0.x * u_xlat16_3.x;\n    u_xlat0.x
            = u_xlat16_12 / u_xlat0.x;\n    u_xlat16_3.x = u_xlat0.x + -6.10351563e-05;\n   
            u_xlat16_3.x = max(u_xlat16_3.x, 0.0);\n    u_xlat16_3.x = min(u_xlat16_3.x,
            100.0);\n    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz + u_xlat16_4.xyz;\n   
            u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x
            : 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - _NORMALMAP
          - _RECEIVE_SHADOWS_OFF
          - _SURFACE_TYPE_TRANSPARENT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: RenderPipeline
            Value: UniversalPipeline
          - Key: RenderType
            Value: Opaque
          - Key: ShaderModel
            Value: 2.0
          - Key: UniversalMaterialType
            Value: Lit
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[16];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_LightIndices[2];\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump
            vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nint u_xlati3;\nmediump
            vec3 u_xlat16_4;\nvec3 u_xlat5;\nbvec3 u_xlatb5;\nvec3 u_xlat6;\nvec3
            u_xlat10;\nint u_xlati10;\nbool u_xlatb10;\nfloat u_xlat17;\nmediump
            float u_xlat16_18;\nfloat u_xlat21;\nint u_xlati21;\nmediump float u_xlat16_23;\nfloat
            u_xlat24;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat21 = max(u_xlat21, 1.17549435e-38);\n    u_xlat21
            = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n   
            u_xlat16_2.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n   
            u_xlati21 = int(u_xlat16_2.x);\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y
            = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(int u_xlati_loop_1
            = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n        u_xlatb10
            = u_xlati_loop_1>=u_xlati21;\n        if(u_xlatb10){\n            break;\n       
            }\n        u_xlat16_23 = float(u_xlati_loop_1);\n        u_xlatb10 =
            u_xlat16_23<2.0;\n        u_xlat16_4.xy = (bool(u_xlatb10)) ? unity_LightIndices[0].xy
            : unity_LightIndices[0].zw;\n        u_xlat16_18 = u_xlat16_23 + -2.0;\n       
            u_xlat16_23 = (u_xlatb10) ? u_xlat16_23 : u_xlat16_18;\n        u_xlatb10
            = u_xlat16_23<1.0;\n        u_xlat16_23 = (u_xlatb10) ? u_xlat16_4.x
            : u_xlat16_4.y;\n        u_xlati10 = int(u_xlat16_23);\n        u_xlat5.xyz
            = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati10].www + _AdditionalLightsPosition[u_xlati10].xyz;\n       
            u_xlat17 = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat17 = max(u_xlat17,
            6.10351563e-05);\n        u_xlat24 = inversesqrt(u_xlat17);\n       
            u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;\n        u_xlat24 = float(1.0)
            / u_xlat17;\n        u_xlat17 = u_xlat17 * _AdditionalLightsAttenuation[u_xlati10].x
            + _AdditionalLightsAttenuation[u_xlati10].y;\n        u_xlat17 = clamp(u_xlat17,
            0.0, 1.0);\n        u_xlat17 = u_xlat17 * u_xlat24;\n        u_xlat16_23
            = dot(_AdditionalLightsSpotDir[u_xlati10].xyz, u_xlat5.xyz);\n       
            u_xlat16_23 = u_xlat16_23 * _AdditionalLightsAttenuation[u_xlati10].z
            + _AdditionalLightsAttenuation[u_xlati10].w;\n        u_xlat16_23 = clamp(u_xlat16_23,
            0.0, 1.0);\n        u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n       
            u_xlat17 = u_xlat16_23 * u_xlat17;\n        u_xlat10.xyz = vec3(u_xlat17)
            * _AdditionalLightsColor[u_xlati10].xyz;\n        u_xlat16_23 = dot(u_xlat1.xyz,
            u_xlat5.xyz);\n        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n       
            u_xlat16_2.xyz = u_xlat10.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;\n   
            }\n    vs_TEXCOORD5.yzw = u_xlat16_2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat1.w = 1.0;\n    u_xlat16_2.x
            = dot(unity_SHAr, u_xlat1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);\n   
            u_xlat16_2.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3 = u_xlat1.yzzx
            * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_3);\n   
            u_xlat16_4.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_4.z = dot(unity_SHBb,
            u_xlat16_3);\n    u_xlat16_23 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_23
            = u_xlat1.x * u_xlat1.x + (-u_xlat16_23);\n    u_xlat16_4.xyz = unity_SHC.xyz
            * vec3(u_xlat16_23) + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            + u_xlat16_4.xyz;\n    u_xlatb5.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;\n    u_xlat16_4.xyz
            = u_xlat16_2.xyz * vec3(12.9232101, 12.9232101, 12.9232101);\n    u_xlat6.xyz
            = log2(abs(u_xlat16_2.xyz));\n    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat6.xyz = exp2(u_xlat6.xyz);\n   
            u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat5.x =
            (u_xlatb5.x) ? u_xlat16_4.x : u_xlat6.x;\n    u_xlat5.y = (u_xlatb5.y)
            ? u_xlat16_4.y : u_xlat6.y;\n    u_xlat5.z = (u_xlatb5.z) ? u_xlat16_4.z
            : u_xlat6.z;\n    vs_TEXCOORD8.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0,
            0.0));\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD5.x = 0.0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2
            _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform
            \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump
            vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0
            gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump
            vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nvec3
            u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump
            vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_10;\nmediump
            vec3 u_xlat16_14;\nmediump float u_xlat16_16;\nmediump float u_xlat16_18;\nfloat
            u_xlat25;\nbool u_xlatb25;\nmediump float u_xlat16_26;\nmediump float
            u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0.x = (-_Smoothness) + 1.0;\n   
            u_xlat16_8.x = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_8.x
            = u_xlat16_8.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n   
            u_xlat16_8.x = u_xlat16_8.x * 6.0;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat1.xyz = vec3(u_xlat25) *
            u_xlat1.xyz;\n    u_xlatb25 = unity_OrthoParams.w==0.0;\n    u_xlat16_2.x
            = (u_xlatb25) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_2.y
            = (u_xlatb25) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_2.z
            = (u_xlatb25) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat1.x
            = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n   
            u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_16 = dot((-u_xlat16_2.xyz),
            u_xlat1.xyz);\n    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;\n    u_xlat16_3.xyz
            = u_xlat1.xyz * (-vec3(u_xlat16_16)) + (-u_xlat16_2.xyz);\n    u_xlat10_3
            = textureCube(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_8.x);\n    u_xlat16_8.x
            = u_xlat10_3.w + -1.0;\n    u_xlat16_0.y = unity_SpecCube0_HDR.w * u_xlat16_8.x
            + 1.0;\n    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0078125, 0.0));\n   
            u_xlat16_8.x = log2(u_xlat16_0.y);\n    u_xlat16_8.x = u_xlat16_8.x *
            unity_SpecCube0_HDR.y;\n    u_xlat16_8.x = exp2(u_xlat16_8.x);\n    u_xlat16_8.x
            = u_xlat16_8.x * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_3.xyz
            * u_xlat16_8.xxx;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat16_2.xyz);\n   
            u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_2.xyz
            + _MainLightPosition.xyz;\n    u_xlat16_2.x = (-u_xlat16_26) + 1.0;\n   
            u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_10 = (-_Metallic) * 0.959999979 + 0.959999979;\n   
            u_xlat16_18 = (-u_xlat16_10) + _Smoothness;\n    u_xlat16_18 = u_xlat16_18
            + 1.0;\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat10_3
            = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_5.xyz
            = u_xlat10_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991,
            -0.0399999991);\n    u_xlat16_3 = u_xlat10_3.wxyz * _BaseColor.wxyz;\n   
            u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz
            + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_6.xyz
            = vec3(u_xlat16_18) + (-u_xlat16_5.xyz);\n    u_xlat16_2.xzw = u_xlat16_2.xxx
            * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xy = u_xlat16_0.xx
            * u_xlat16_0.xx + vec2(-1.0, 1.0);\n    u_xlat16_29 = float(1.0) / u_xlat16_6.y;\n   
            u_xlat7.xyz = u_xlat16_2.xzw * vec3(u_xlat16_29);\n    u_xlat16_8.xyz
            = u_xlat16_8.xyz * u_xlat7.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_10)
            * u_xlat16_3.yzw;\n    u_xlat16_8.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xyz
            + u_xlat16_8.xyz;\n    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);\n   
            u_xlat25 = max(u_xlat25, 1.17549435e-38);\n    u_xlat25 = inversesqrt(u_xlat25);\n   
            u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;\n    u_xlat25 = dot(_MainLightPosition.xyz,
            u_xlat4.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat4.x
            = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat4.x = clamp(u_xlat4.x, 0.0,
            1.0);\n    u_xlat16_26 = dot(u_xlat1.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_26
            * unity_LightData.z;\n    u_xlat16_14.xyz = vec3(u_xlat16_26) * _MainLightColor.xyz;\n   
            u_xlat1.x = u_xlat4.x * u_xlat4.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_6.x
            + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat16_26
            = u_xlat25 * u_xlat25;\n    u_xlat9 = max(u_xlat16_26, 0.100000001);\n   
            u_xlat1.x = u_xlat9 * u_xlat1.x;\n    u_xlat16_26 = u_xlat16_0.x * 4.0
            + 2.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat1.x
            = u_xlat1.x * u_xlat16_26;\n    u_xlat1.x = u_xlat16_0.x / u_xlat1.x;\n   
            u_xlat16_0.x = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_0.x = max(u_xlat16_0.x,
            0.0);\n    u_xlat16_0.x = min(u_xlat16_0.x, 100.0);\n    u_xlat16_5.xyz
            = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.xyz
            = u_xlat16_5.xyz * u_xlat16_14.xyz + u_xlat16_8.xyz;\n    SV_Target0.xyz
            = vs_TEXCOORD5.yzw * u_xlat16_2.xyz + u_xlat16_0.xyz;\n    u_xlatb1 =
            _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? u_xlat16_3.x : 1.0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 6
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - _ADDITIONAL_LIGHTS_VERTEX
          - _RECEIVE_SHADOWS_OFF
          - _SURFACE_TYPE_TRANSPARENT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: RenderPipeline
            Value: UniversalPipeline
          - Key: RenderType
            Value: Opaque
          - Key: ShaderModel
            Value: 2.0
          - Key: UniversalMaterialType
            Value: Lit
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[16];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_WorldTransformParams;\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3
            vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4
            vs_TEXCOORD3;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying mediump vec3
            vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec4 u_xlat16_4;\nint u_xlati4;\nmediump vec3 u_xlat16_5;\nvec3
            u_xlat6;\nbvec3 u_xlatb6;\nvec3 u_xlat7;\nvec3 u_xlat12;\nint u_xlati12;\nbool
            u_xlatb12;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nint
            u_xlati24;\nbool u_xlatb24;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat24 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat24 = max(u_xlat24, 1.17549435e-38);\n    u_xlat24
            = inversesqrt(u_xlat24);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n   
            u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat24 = max(u_xlat24, 1.17549435e-38);\n    u_xlat24 = inversesqrt(u_xlat24);\n   
            u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat16_3.x = min(_AdditionalLightsCount.x,
            unity_LightData.y);\n    u_xlati24 = int(u_xlat16_3.x);\n    u_xlat16_3.x
            = float(0.0);\n    u_xlat16_3.y = float(0.0);\n    u_xlat16_3.z = float(0.0);\n   
            for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n   
            {\n        u_xlatb12 = u_xlati_loop_1>=u_xlati24;\n        if(u_xlatb12){\n           
            break;\n        }\n        u_xlat16_27 = float(u_xlati_loop_1);\n       
            u_xlatb12 = u_xlat16_27<2.0;\n        u_xlat16_5.xy = (bool(u_xlatb12))
            ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n        u_xlat16_21
            = u_xlat16_27 + -2.0;\n        u_xlat16_27 = (u_xlatb12) ? u_xlat16_27
            : u_xlat16_21;\n        u_xlatb12 = u_xlat16_27<1.0;\n        u_xlat16_27
            = (u_xlatb12) ? u_xlat16_5.x : u_xlat16_5.y;\n        u_xlati12 = int(u_xlat16_27);\n       
            u_xlat6.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati12].www
            + _AdditionalLightsPosition[u_xlati12].xyz;\n        u_xlat20 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat20 = max(u_xlat20, 6.10351563e-05);\n       
            u_xlat28 = inversesqrt(u_xlat20);\n        u_xlat6.xyz = vec3(u_xlat28)
            * u_xlat6.xyz;\n        u_xlat28 = float(1.0) / u_xlat20;\n        u_xlat20
            = u_xlat20 * _AdditionalLightsAttenuation[u_xlati12].x + _AdditionalLightsAttenuation[u_xlati12].y;\n       
            u_xlat20 = clamp(u_xlat20, 0.0, 1.0);\n        u_xlat20 = u_xlat20 *
            u_xlat28;\n        u_xlat16_27 = dot(_AdditionalLightsSpotDir[u_xlati12].xyz,
            u_xlat6.xyz);\n        u_xlat16_27 = u_xlat16_27 * _AdditionalLightsAttenuation[u_xlati12].z
            + _AdditionalLightsAttenuation[u_xlati12].w;\n        u_xlat16_27 = clamp(u_xlat16_27,
            0.0, 1.0);\n        u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n       
            u_xlat20 = u_xlat16_27 * u_xlat20;\n        u_xlat12.xyz = vec3(u_xlat20)
            * _AdditionalLightsColor[u_xlati12].xyz;\n        u_xlat16_27 = dot(u_xlat1.xyz,
            u_xlat6.xyz);\n        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n       
            u_xlat16_3.xyz = u_xlat12.xyz * vec3(u_xlat16_27) + u_xlat16_3.xyz;\n   
            }\n    vs_TEXCOORD5.yzw = u_xlat16_3.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlatb24 = unity_WorldTransformParams.w>=0.0;\n   
            u_xlat24 = (u_xlatb24) ? 1.0 : -1.0;\n    u_xlat2.w = u_xlat24 * in_TANGENT0.w;\n   
            u_xlat1.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_3.y
            = dot(unity_SHAg, u_xlat1);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);\n   
            u_xlat16_4 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_5.x = dot(unity_SHBr,
            u_xlat16_4);\n    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);\n    u_xlat16_5.z
            = dot(unity_SHBb, u_xlat16_4);\n    u_xlat16_27 = u_xlat1.y * u_xlat1.y;\n   
            u_xlat16_27 = u_xlat1.x * u_xlat1.x + (-u_xlat16_27);\n    u_xlat16_5.xyz
            = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlatb6.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_5.xyz
            = u_xlat16_3.xyz * vec3(12.9232101, 12.9232101, 12.9232101);\n    u_xlat7.xyz
            = log2(abs(u_xlat16_3.xyz));\n    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat7.xyz = exp2(u_xlat7.xyz);\n   
            u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat6.x =
            (u_xlatb6.x) ? u_xlat16_5.x : u_xlat7.x;\n    u_xlat6.y = (u_xlatb6.y)
            ? u_xlat16_5.y : u_xlat7.y;\n    u_xlat6.z = (u_xlatb6.z) ? u_xlat16_5.z
            : u_xlat7.z;\n    vs_TEXCOORD8.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0,
            0.0));\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD3 = u_xlat2;\n    vs_TEXCOORD5.x = 0.0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2
            _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SpecColor;\nuniform \tmediump float _Smoothness;\nuniform
            \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _BumpMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump
            vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec4
            u_xlat10_1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_11;\nfloat u_xlat21;\nbool
            u_xlatb21;\nmediump float u_xlat16_24;\nmediump float u_xlat16_25;\nvoid
            main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n    u_xlat0.z = vs_TEXCOORD2.x;\n   
            u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat1.xyz =
            vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n    u_xlat1.xyz
            = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n    u_xlat10_2.xy
            = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy
            = u_xlat10_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_24
            = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_24 = min(u_xlat16_24,
            1.0);\n    u_xlat16_24 = (-u_xlat16_24) + 1.0;\n    u_xlat16_24 = sqrt(u_xlat16_24);\n   
            u_xlat16_3.z = max(u_xlat16_24, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz,
            u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n   
            u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n   
            u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z
            = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat21 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat0.xyz
            = vec3(u_xlat21) * u_xlat0.xyz;\n    u_xlat16_3.x = dot(u_xlat0.xyz,
            _MainLightPosition.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0,
            1.0);\n    u_xlat16_3.x = u_xlat16_3.x * unity_LightData.z;\n    u_xlat16_3.xyz
            = u_xlat16_3.xxx * _MainLightColor.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) *
            u_xlat1.xyz;\n    u_xlatb21 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x
            = (u_xlatb21) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y
            = (u_xlatb21) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z
            = (u_xlatb21) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_24
            = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_24 = u_xlat16_24
            + u_xlat16_24;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_24))
            + (-u_xlat16_4.xyz);\n    u_xlat16_24 = (-_Smoothness) + 1.0;\n    u_xlat16_25
            = (-u_xlat16_24) * 0.699999988 + 1.70000005;\n    u_xlat16_25 = u_xlat16_24
            * u_xlat16_25;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_24
            = max(u_xlat16_24, 0.0078125);\n    u_xlat16_25 = u_xlat16_25 * 6.0;\n   
            u_xlat10_1 = textureCube(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_25);\n   
            u_xlat16_25 = u_xlat10_1.w + -1.0;\n    u_xlat16_25 = unity_SpecCube0_HDR.w
            * u_xlat16_25 + 1.0;\n    u_xlat16_25 = max(u_xlat16_25, 0.0);\n    u_xlat16_25
            = log2(u_xlat16_25);\n    u_xlat16_25 = u_xlat16_25 * unity_SpecCube0_HDR.y;\n   
            u_xlat16_25 = exp2(u_xlat16_25);\n    u_xlat16_25 = u_xlat16_25 * unity_SpecCube0_HDR.x;\n   
            u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(u_xlat16_25);\n    u_xlat16_25
            = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_25 = clamp(u_xlat16_25,
            0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n   
            u_xlat16_4.x = (-u_xlat16_25) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x
            * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n   
            u_xlat16_11.x = _SpecColor.x + _Smoothness;\n    u_xlat16_11.x = clamp(u_xlat16_11.x,
            0.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_11.xxx + (-_SpecColor.xyz);\n   
            u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _SpecColor.xyz;\n   
            u_xlat16_6.xy = vec2(u_xlat16_24) * vec2(u_xlat16_24) + vec2(-1.0, 1.0);\n   
            u_xlat16_25 = float(1.0) / u_xlat16_6.y;\n    u_xlat2.xyz = u_xlat16_4.xyz
            * vec3(u_xlat16_25);\n    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_5.xyz;\n   
            u_xlat16_25 = (-_SpecColor.x) + 1.0;\n    u_xlat10_2 = texture2D(_BaseMap,
            vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_2 = u_xlat10_2.wxyz
            * _BaseColor.wxyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_2.yzw;\n   
            u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;\n   
            u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat21,
            1.17549435e-38);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz
            = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(_MainLightPosition.xyz,
            u_xlat1.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat16_25
            = u_xlat7 * u_xlat7;\n    u_xlat7 = max(u_xlat16_25, 0.100000001);\n   
            u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_6.x
            + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x
            = u_xlat7 * u_xlat0.x;\n    u_xlat16_25 = u_xlat16_24 * 4.0 + 2.0;\n   
            u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat0.x = u_xlat0.x *
            u_xlat16_25;\n    u_xlat0.x = u_xlat16_24 / u_xlat0.x;\n    u_xlat16_24
            = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_24 = max(u_xlat16_24, 0.0);\n   
            u_xlat16_24 = min(u_xlat16_24, 100.0);\n    u_xlat16_6.xyz = _SpecColor.xyz
            * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz
            * u_xlat16_3.xyz + u_xlat16_4.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw
            * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n   
            SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x : 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 6
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - _ADDITIONAL_LIGHTS_VERTEX
          - _NORMALMAP
          - _SPECULAR_SETUP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: RenderPipeline
            Value: UniversalPipeline
          - Key: RenderType
            Value: Opaque
          - Key: ShaderModel
            Value: 2.0
          - Key: UniversalMaterialType
            Value: Lit
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[16];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_WorldTransformParams;\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3
            vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4
            vs_TEXCOORD3;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying mediump vec3
            vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec4 u_xlat16_4;\nint u_xlati4;\nmediump vec3 u_xlat16_5;\nvec3
            u_xlat6;\nbvec3 u_xlatb6;\nvec3 u_xlat7;\nvec3 u_xlat12;\nint u_xlati12;\nbool
            u_xlatb12;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nint
            u_xlati24;\nbool u_xlatb24;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat24 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat24 = max(u_xlat24, 1.17549435e-38);\n    u_xlat24
            = inversesqrt(u_xlat24);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n   
            u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat24 = max(u_xlat24, 1.17549435e-38);\n    u_xlat24 = inversesqrt(u_xlat24);\n   
            u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat16_3.x = min(_AdditionalLightsCount.x,
            unity_LightData.y);\n    u_xlati24 = int(u_xlat16_3.x);\n    u_xlat16_3.x
            = float(0.0);\n    u_xlat16_3.y = float(0.0);\n    u_xlat16_3.z = float(0.0);\n   
            for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n   
            {\n        u_xlatb12 = u_xlati_loop_1>=u_xlati24;\n        if(u_xlatb12){\n           
            break;\n        }\n        u_xlat16_27 = float(u_xlati_loop_1);\n       
            u_xlatb12 = u_xlat16_27<2.0;\n        u_xlat16_5.xy = (bool(u_xlatb12))
            ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n        u_xlat16_21
            = u_xlat16_27 + -2.0;\n        u_xlat16_27 = (u_xlatb12) ? u_xlat16_27
            : u_xlat16_21;\n        u_xlatb12 = u_xlat16_27<1.0;\n        u_xlat16_27
            = (u_xlatb12) ? u_xlat16_5.x : u_xlat16_5.y;\n        u_xlati12 = int(u_xlat16_27);\n       
            u_xlat6.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati12].www
            + _AdditionalLightsPosition[u_xlati12].xyz;\n        u_xlat20 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat20 = max(u_xlat20, 6.10351563e-05);\n       
            u_xlat28 = inversesqrt(u_xlat20);\n        u_xlat6.xyz = vec3(u_xlat28)
            * u_xlat6.xyz;\n        u_xlat28 = float(1.0) / u_xlat20;\n        u_xlat20
            = u_xlat20 * _AdditionalLightsAttenuation[u_xlati12].x + _AdditionalLightsAttenuation[u_xlati12].y;\n       
            u_xlat20 = clamp(u_xlat20, 0.0, 1.0);\n        u_xlat20 = u_xlat20 *
            u_xlat28;\n        u_xlat16_27 = dot(_AdditionalLightsSpotDir[u_xlati12].xyz,
            u_xlat6.xyz);\n        u_xlat16_27 = u_xlat16_27 * _AdditionalLightsAttenuation[u_xlati12].z
            + _AdditionalLightsAttenuation[u_xlati12].w;\n        u_xlat16_27 = clamp(u_xlat16_27,
            0.0, 1.0);\n        u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n       
            u_xlat20 = u_xlat16_27 * u_xlat20;\n        u_xlat12.xyz = vec3(u_xlat20)
            * _AdditionalLightsColor[u_xlati12].xyz;\n        u_xlat16_27 = dot(u_xlat1.xyz,
            u_xlat6.xyz);\n        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n       
            u_xlat16_3.xyz = u_xlat12.xyz * vec3(u_xlat16_27) + u_xlat16_3.xyz;\n   
            }\n    vs_TEXCOORD5.yzw = u_xlat16_3.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlatb24 = unity_WorldTransformParams.w>=0.0;\n   
            u_xlat24 = (u_xlatb24) ? 1.0 : -1.0;\n    u_xlat2.w = u_xlat24 * in_TANGENT0.w;\n   
            u_xlat1.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_3.y
            = dot(unity_SHAg, u_xlat1);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);\n   
            u_xlat16_4 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_5.x = dot(unity_SHBr,
            u_xlat16_4);\n    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);\n    u_xlat16_5.z
            = dot(unity_SHBb, u_xlat16_4);\n    u_xlat16_27 = u_xlat1.y * u_xlat1.y;\n   
            u_xlat16_27 = u_xlat1.x * u_xlat1.x + (-u_xlat16_27);\n    u_xlat16_5.xyz
            = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlatb6.xyz = greaterThanEqual(vec4(0.00313080009,
            0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_5.xyz
            = u_xlat16_3.xyz * vec3(12.9232101, 12.9232101, 12.9232101);\n    u_xlat7.xyz
            = log2(abs(u_xlat16_3.xyz));\n    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657,
            0.416666657, 0.416666657);\n    u_xlat7.xyz = exp2(u_xlat7.xyz);\n   
            u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995)
            + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat6.x =
            (u_xlatb6.x) ? u_xlat16_5.x : u_xlat7.x;\n    u_xlat6.y = (u_xlatb6.y)
            ? u_xlat16_5.y : u_xlat7.y;\n    u_xlat6.z = (u_xlatb6.z) ? u_xlat16_5.z
            : u_xlat7.z;\n    vs_TEXCOORD8.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0,
            0.0));\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD3 = u_xlat2;\n    vs_TEXCOORD5.x = 0.0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2
            _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform
            \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _BumpMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump
            vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec4
            u_xlat10_1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump
            float u_xlat16_13;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nbool
            u_xlatb27;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nmediump
            float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n   
            u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n   
            u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n   
            u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n   
            u_xlat10_2.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n   
            u_xlat16_3.xy = u_xlat10_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n   
            u_xlat16_30 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_30 = min(u_xlat16_30,
            1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = sqrt(u_xlat16_30);\n   
            u_xlat16_3.z = max(u_xlat16_30, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz,
            u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n   
            u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n   
            u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z
            = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat27 = dot(u_xlat0.xyz,
            u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz
            = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat16_3.x = dot(u_xlat0.xyz,
            _MainLightPosition.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0,
            1.0);\n    u_xlat16_3.x = u_xlat16_3.x * unity_LightData.z;\n    u_xlat16_3.xyz
            = u_xlat16_3.xxx * _MainLightColor.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) *
            u_xlat1.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x
            = (u_xlatb27) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y
            = (u_xlatb27) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z
            = (u_xlatb27) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_30
            = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_30 = u_xlat16_30
            + u_xlat16_30;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_30))
            + (-u_xlat16_4.xyz);\n    u_xlat16_30 = (-_Smoothness) + 1.0;\n    u_xlat16_31
            = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_30
            * u_xlat16_31;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30
            = max(u_xlat16_30, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n   
            u_xlat10_1 = textureCube(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n   
            u_xlat16_31 = u_xlat10_1.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w
            * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31
            = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n   
            u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n   
            u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(u_xlat16_31);\n    u_xlat16_31
            = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31,
            0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n   
            u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x
            * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n   
            u_xlat16_13 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22
            = (-u_xlat16_13) + _Smoothness;\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n   
            u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat10_2 = texture2D(_BaseMap,
            vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat10_2.xyz
            * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n   
            u_xlat16_2 = u_xlat10_2.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz =
            vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991,
            0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_22)
            + (-u_xlat16_6.xyz);\n    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_7.xyz
            + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_30) * vec2(u_xlat16_30)
            + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n   
            u_xlat8.xyz = u_xlat16_4.xzw * vec3(u_xlat16_32);\n    u_xlat16_4.xzw
            = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_13)
            * u_xlat16_2.yzw;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz
            + u_xlat16_4.xzw;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n   
            u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9
            = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat9 = clamp(u_xlat9,
            0.0, 1.0);\n    u_xlat16_31 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_31,
            0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x
            = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x *
            u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_30
            * 4.0 + 2.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat0.x
            = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_30 / u_xlat0.x;\n   
            u_xlat16_30 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_30 = max(u_xlat16_30,
            0.0);\n    u_xlat16_30 = min(u_xlat16_30, 100.0);\n    u_xlat16_6.xyz
            = u_xlat16_6.xyz * vec3(u_xlat16_30) + u_xlat16_5.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;\n    SV_Target0.xyz
            = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    u_xlatb0 =
            _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x : 1.0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 7
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - _ADDITIONAL_LIGHTS_VERTEX
          - _NORMALMAP
          - _RECEIVE_SHADOWS_OFF
          - _SURFACE_TYPE_TRANSPARENT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: RenderPipeline
            Value: UniversalPipeline
          - Key: RenderType
            Value: Opaque
          - Key: ShaderModel
            Value: 2.0
          - Key: UniversalMaterialType
            Value: Lit
        definedKeywords:
        - DEBUG_DISPLAY
        - DIRLIGHTMAP_COMBINED
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - INSTANCING_ON
        - LIGHTMAP_ON
        - LIGHTMAP_SHADOW_MIXING
        - SHADOWS_SHADOWMASK
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _ADDITIONAL_LIGHTS
        - _ADDITIONAL_LIGHTS_VERTEX
        - _ADDITIONAL_LIGHT_SHADOWS
        - _ALPHAPREMULTIPLY_ON
        - _ALPHATEST_ON
        - _CLUSTERED_RENDERING
        - _DBUFFER_MRT1
        - _DBUFFER_MRT2
        - _DBUFFER_MRT3
        - _DETAIL_MULX2
        - _DETAIL_SCALED
        - _EMISSION
        - _ENVIRONMENTREFLECTIONS_OFF
        - _LIGHT_COOKIES
        - _LIGHT_LAYERS
        - _MAIN_LIGHT_SHADOWS
        - _MAIN_LIGHT_SHADOWS_CASCADE
        - _MAIN_LIGHT_SHADOWS_SCREEN
        - _METALLICSPECGLOSSMAP
        - _NORMALMAP
        - _OCCLUSIONMAP
        - _PARALLAXMAP
        - _RECEIVE_SHADOWS_OFF
        - _REFLECTION_PROBE_BLENDING
        - _REFLECTION_PROBE_BOX_PROJECTION
        - _SCREEN_SPACE_OCCLUSION
        - _SHADOWS_SOFT
        - _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
        - _SPECULARHIGHLIGHTS_OFF
        - _SPECULAR_SETUP
        - _SURFACE_TYPE_TRANSPARENT
        - _
        - __
        keywordGroups:
        - Keywords:
          - _
          - _MAIN_LIGHT_SHADOWS
          - _MAIN_LIGHT_SHADOWS_CASCADE
          - _MAIN_LIGHT_SHADOWS_SCREEN
        - Keywords:
          - _
          - _ADDITIONAL_LIGHTS_VERTEX
          - _ADDITIONAL_LIGHTS
        - Keywords:
          - _
          - _CLUSTERED_RENDERING
        - Keywords:
          - _
          - LIGHTMAP_SHADOW_MIXING
        - Keywords:
          - _
          - SHADOWS_SHADOWMASK
        - Keywords:
          - _
          - DIRLIGHTMAP_COMBINED
        - Keywords:
          - _
          - LIGHTMAP_ON
        - Keywords:
          - __
          - INSTANCING_ON
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - Keywords:
          - _
          - _NORMALMAP
        - Keywords:
          - _
          - _PARALLAXMAP
        - Keywords:
          - _
          - _RECEIVE_SHADOWS_OFF
        - Keywords:
          - _
          - _DETAIL_MULX2
          - _DETAIL_SCALED
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 1
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: LIGHTMODE
          Value: UniversalForward
        - Key: RenderPipeline
          Value: UniversalPipeline
        - Key: RenderType
          Value: Opaque
        - Key: ShaderModel
          Value: 2.0
        - Key: UniversalMaterialType
          Value: Lit
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: 33328
      - ShaderName: Universal Render Pipeline/Lit
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nuniform \tvec4 _ShadowBias;\nuniform \tvec3 _LightDirection;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;\n   
            u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = max(u_xlat6,
            1.17549435e-38);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat1.xyz
            = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat6 = dot(_LightDirection.xyz,
            u_xlat1.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 =
            (-u_xlat6) + 1.0;\n    u_xlat6 = u_xlat6 * _ShadowBias.y;\n    u_xlat0.xyz
            = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position.z = max(u_xlat0.z, -1.0);\n    gl_Position.xyw = u_xlat0.xyw;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\n#define SV_TARGET0 gl_FragData[0]\nvoid main()\n{\n    SV_TARGET0
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 1
          SubShaderIndex: 1
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: RenderPipeline
            Value: UniversalPipeline
          - Key: RenderType
            Value: Opaque
          - Key: ShaderModel
            Value: 2.0
          - Key: UniversalMaterialType
            Value: Lit
        definedKeywords:
        - INSTANCING_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _ALPHATEST_ON
        - _CASTING_PUNCTUAL_LIGHT_SHADOW
        - _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
        - _
        - __
        keywordGroups:
        - Keywords:
          - _
          - _CASTING_PUNCTUAL_LIGHT_SHADOW
        - Keywords:
          - __
          - INSTANCING_ON
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 1
        SerializedObjectId: 1
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: RenderPipeline
          Value: UniversalPipeline
        - Key: RenderType
          Value: Opaque
        - Key: ShaderModel
          Value: 2.0
        - Key: UniversalMaterialType
          Value: Lit
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: 33328
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: RenderPipeline
        Value: UniversalPipeline
      - Key: RenderType
        Value: Opaque
      - Key: ShaderModel
        Value: 2.0
      - Key: UniversalMaterialType
        Value: Lit
      UsePass: 0
    Shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    ShaderPath: Packages/com.unity.render-pipelines.universal/Shaders/Lit.shader
    ShaderDefinedKeywords:
    - DIRLIGHTMAP_COMBINED
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - LIGHTMAP_ON
    - SHADOWS_SHADOWMASK
    - _ADDITIONAL_LIGHTS
    - _ADDITIONAL_LIGHTS_VERTEX
    - _ALPHAPREMULTIPLY_ON
    - _ALPHATEST_ON
    - _EMISSION
    - _ENVIRONMENTREFLECTIONS_OFF
    - _LIGHT_COOKIES
    - _METALLICSPECGLOSSMAP
    - _NORMALMAP
    - _OCCLUSIONMAP
    - _PARALLAXMAP
    - _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
    - _SPECULARHIGHLIGHTS_OFF
    - _SPECULAR_SETUP
    - DEBUG_DISPLAY
    - INSTANCING_ON
    - LIGHTMAP_SHADOW_MIXING
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _ADDITIONAL_LIGHT_SHADOWS
    - _CLUSTERED_RENDERING
    - _DBUFFER_MRT1
    - _DBUFFER_MRT2
    - _DBUFFER_MRT3
    - _DETAIL_MULX2
    - _DETAIL_SCALED
    - _LIGHT_LAYERS
    - _MAIN_LIGHT_SHADOWS
    - _MAIN_LIGHT_SHADOWS_CASCADE
    - _MAIN_LIGHT_SHADOWS_SCREEN
    - _RECEIVE_SHADOWS_OFF
    - _REFLECTION_PROBE_BLENDING
    - _REFLECTION_PROBE_BOX_PROJECTION
    - _SCREEN_SPACE_OCCLUSION
    - _SHADOWS_SOFT
    - _SURFACE_TYPE_TRANSPARENT
    - _
    - __
    - _CASTING_PUNCTUAL_LIGHT_SHADOW
    fallbackShader: {fileID: 4800000, guid: e6e9a19c3678ded42a3bc431ebef7dbd, type: 3}
    CompilationErrors: []
    shaderCompilerPlatform: 5
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderName: Universal Render Pipeline/Unlit
        ShaderVariants: []
        definedKeywords: []
        keywordGroups: []
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: RenderPipeline
          Value: UniversalPipeline
        - Key: RenderType
          Value: Opaque
        - Key: ShaderModel
          Value: 4.5
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1101803
        PlatformMask: -33313
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: RenderPipeline
        Value: UniversalPipeline
      - Key: RenderType
        Value: Opaque
      - Key: ShaderModel
        Value: 4.5
      UsePass: 0
    - Index: 1
      Passes:
      - ShaderName: Universal Render Pipeline/Unlit
        ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp float
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat6 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat6 =
            hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat6;\n    u_xlat6 =
            hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat6;\n    vs_TEXCOORD1
            = u_xlat6 + hlslcc_mtx4x4unity_MatrixV[3].z;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec2 _GlobalMipBias;\nuniform \tmediump vec4 _BaseColor;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0
            gl_FragData[0]\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0
            = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    SV_Target0
            = u_xlat10_0 * _BaseColor;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 1
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RenderPipeline
            Value: UniversalPipeline
          - Key: RenderType
            Value: Opaque
          - Key: ShaderModel
            Value: 2.0
        definedKeywords:
        - DEBUG_DISPLAY
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - INSTANCING_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _ALPHAPREMULTIPLY_ON
        - _ALPHATEST_ON
        - _SCREEN_SPACE_OCCLUSION
        - _SURFACE_TYPE_TRANSPARENT
        - _
        - __
        keywordGroups:
        - Keywords:
          - _
          - DEBUG_DISPLAY
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - Keywords:
          - __
          - INSTANCING_ON
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        ShaderCompilerPlatform: 5
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 1
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: RenderPipeline
          Value: UniversalPipeline
        - Key: RenderType
          Value: Opaque
        - Key: ShaderModel
          Value: 2.0
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PassShaderRequirements: 1
        PlatformMask: 33328
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: RenderPipeline
        Value: UniversalPipeline
      - Key: RenderType
        Value: Opaque
      - Key: ShaderModel
        Value: 2.0
      UsePass: 0
    Shader: {fileID: 4800000, guid: 650dd9526735d5b46b79224bc6e94025, type: 3}
    ShaderPath: Packages/com.unity.render-pipelines.universal/Shaders/Unlit.shader
    ShaderDefinedKeywords:
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - _ALPHAPREMULTIPLY_ON
    - _ALPHATEST_ON
    - DEBUG_DISPLAY
    - INSTANCING_ON
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _SCREEN_SPACE_OCCLUSION
    - _SURFACE_TYPE_TRANSPARENT
    - _
    - __
    fallbackShader: {fileID: 4800000, guid: e6e9a19c3678ded42a3bc431ebef7dbd, type: 3}
    CompilationErrors: []
    shaderCompilerPlatform: 5
  _modifiedShaders: []
  invalidShaders: 0
  _cachedShadersPlatform: 5
  _sceneLightData:
    PointLightCount: 0
    SpotLightCount: 0
    DirectionalLightCount: 0
    LightmapOn: 0
    DirlightmapCombined: 0
    DirectionalCookieExists: 0
    PointCookieExists: 0
    SpotCookieExists: 0
    AddiitonalLightsKeywordRequired: 1
